// Code generated by counterfeiter. DO NOT EDIT.
package resourceserverfakes

import (
	"sync"

	"github.com/concourse/concourse/atc/api/resourceserver"
	"github.com/concourse/concourse/atc/db"
	"github.com/concourse/concourse/atc/radar"
)

type FakeScannerFactory struct {
	NewResourceScannerStub        func(db.Pipeline) radar.Scanner
	newResourceScannerMutex       sync.RWMutex
	newResourceScannerArgsForCall []struct {
		arg1 db.Pipeline
	}
	newResourceScannerReturns struct {
		result1 radar.Scanner
	}
	newResourceScannerReturnsOnCall map[int]struct {
		result1 radar.Scanner
	}
	NewResourceTypeScannerStub        func(db.Pipeline) radar.Scanner
	newResourceTypeScannerMutex       sync.RWMutex
	newResourceTypeScannerArgsForCall []struct {
		arg1 db.Pipeline
	}
	newResourceTypeScannerReturns struct {
		result1 radar.Scanner
	}
	newResourceTypeScannerReturnsOnCall map[int]struct {
		result1 radar.Scanner
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeScannerFactory) NewResourceScanner(arg1 db.Pipeline) radar.Scanner {
	fake.newResourceScannerMutex.Lock()
	ret, specificReturn := fake.newResourceScannerReturnsOnCall[len(fake.newResourceScannerArgsForCall)]
	fake.newResourceScannerArgsForCall = append(fake.newResourceScannerArgsForCall, struct {
		arg1 db.Pipeline
	}{arg1})
	fake.recordInvocation("NewResourceScanner", []interface{}{arg1})
	fake.newResourceScannerMutex.Unlock()
	if fake.NewResourceScannerStub != nil {
		return fake.NewResourceScannerStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.newResourceScannerReturns
	return fakeReturns.result1
}

func (fake *FakeScannerFactory) NewResourceScannerCallCount() int {
	fake.newResourceScannerMutex.RLock()
	defer fake.newResourceScannerMutex.RUnlock()
	return len(fake.newResourceScannerArgsForCall)
}

func (fake *FakeScannerFactory) NewResourceScannerCalls(stub func(db.Pipeline) radar.Scanner) {
	fake.newResourceScannerMutex.Lock()
	defer fake.newResourceScannerMutex.Unlock()
	fake.NewResourceScannerStub = stub
}

func (fake *FakeScannerFactory) NewResourceScannerArgsForCall(i int) db.Pipeline {
	fake.newResourceScannerMutex.RLock()
	defer fake.newResourceScannerMutex.RUnlock()
	argsForCall := fake.newResourceScannerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeScannerFactory) NewResourceScannerReturns(result1 radar.Scanner) {
	fake.newResourceScannerMutex.Lock()
	defer fake.newResourceScannerMutex.Unlock()
	fake.NewResourceScannerStub = nil
	fake.newResourceScannerReturns = struct {
		result1 radar.Scanner
	}{result1}
}

func (fake *FakeScannerFactory) NewResourceScannerReturnsOnCall(i int, result1 radar.Scanner) {
	fake.newResourceScannerMutex.Lock()
	defer fake.newResourceScannerMutex.Unlock()
	fake.NewResourceScannerStub = nil
	if fake.newResourceScannerReturnsOnCall == nil {
		fake.newResourceScannerReturnsOnCall = make(map[int]struct {
			result1 radar.Scanner
		})
	}
	fake.newResourceScannerReturnsOnCall[i] = struct {
		result1 radar.Scanner
	}{result1}
}

func (fake *FakeScannerFactory) NewResourceTypeScanner(arg1 db.Pipeline) radar.Scanner {
	fake.newResourceTypeScannerMutex.Lock()
	ret, specificReturn := fake.newResourceTypeScannerReturnsOnCall[len(fake.newResourceTypeScannerArgsForCall)]
	fake.newResourceTypeScannerArgsForCall = append(fake.newResourceTypeScannerArgsForCall, struct {
		arg1 db.Pipeline
	}{arg1})
	fake.recordInvocation("NewResourceTypeScanner", []interface{}{arg1})
	fake.newResourceTypeScannerMutex.Unlock()
	if fake.NewResourceTypeScannerStub != nil {
		return fake.NewResourceTypeScannerStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.newResourceTypeScannerReturns
	return fakeReturns.result1
}

func (fake *FakeScannerFactory) NewResourceTypeScannerCallCount() int {
	fake.newResourceTypeScannerMutex.RLock()
	defer fake.newResourceTypeScannerMutex.RUnlock()
	return len(fake.newResourceTypeScannerArgsForCall)
}

func (fake *FakeScannerFactory) NewResourceTypeScannerCalls(stub func(db.Pipeline) radar.Scanner) {
	fake.newResourceTypeScannerMutex.Lock()
	defer fake.newResourceTypeScannerMutex.Unlock()
	fake.NewResourceTypeScannerStub = stub
}

func (fake *FakeScannerFactory) NewResourceTypeScannerArgsForCall(i int) db.Pipeline {
	fake.newResourceTypeScannerMutex.RLock()
	defer fake.newResourceTypeScannerMutex.RUnlock()
	argsForCall := fake.newResourceTypeScannerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeScannerFactory) NewResourceTypeScannerReturns(result1 radar.Scanner) {
	fake.newResourceTypeScannerMutex.Lock()
	defer fake.newResourceTypeScannerMutex.Unlock()
	fake.NewResourceTypeScannerStub = nil
	fake.newResourceTypeScannerReturns = struct {
		result1 radar.Scanner
	}{result1}
}

func (fake *FakeScannerFactory) NewResourceTypeScannerReturnsOnCall(i int, result1 radar.Scanner) {
	fake.newResourceTypeScannerMutex.Lock()
	defer fake.newResourceTypeScannerMutex.Unlock()
	fake.NewResourceTypeScannerStub = nil
	if fake.newResourceTypeScannerReturnsOnCall == nil {
		fake.newResourceTypeScannerReturnsOnCall = make(map[int]struct {
			result1 radar.Scanner
		})
	}
	fake.newResourceTypeScannerReturnsOnCall[i] = struct {
		result1 radar.Scanner
	}{result1}
}

func (fake *FakeScannerFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newResourceScannerMutex.RLock()
	defer fake.newResourceScannerMutex.RUnlock()
	fake.newResourceTypeScannerMutex.RLock()
	defer fake.newResourceTypeScannerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeScannerFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resourceserver.ScannerFactory = new(FakeScannerFactory)
