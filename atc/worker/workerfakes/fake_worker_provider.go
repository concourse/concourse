// Code generated by counterfeiter. DO NOT EDIT.
package workerfakes

import (
	sync "sync"

	clock "code.cloudfoundry.org/clock"
	lager "code.cloudfoundry.org/lager"
	db "github.com/concourse/concourse/atc/db"
	worker "github.com/concourse/concourse/atc/worker"
)

type FakeWorkerProvider struct {
	FindWorkerForContainerStub        func(lager.Logger, int, string) (worker.Worker, bool, error)
	findWorkerForContainerMutex       sync.RWMutex
	findWorkerForContainerArgsForCall []struct {
		arg1 lager.Logger
		arg2 int
		arg3 string
	}
	findWorkerForContainerReturns struct {
		result1 worker.Worker
		result2 bool
		result3 error
	}
	findWorkerForContainerReturnsOnCall map[int]struct {
		result1 worker.Worker
		result2 bool
		result3 error
	}
	FindWorkersForContainerByOwnerStub        func(lager.Logger, db.ContainerOwner) ([]worker.Worker, error)
	findWorkersForContainerByOwnerMutex       sync.RWMutex
	findWorkersForContainerByOwnerArgsForCall []struct {
		arg1 lager.Logger
		arg2 db.ContainerOwner
	}
	findWorkersForContainerByOwnerReturns struct {
		result1 []worker.Worker
		result2 error
	}
	findWorkersForContainerByOwnerReturnsOnCall map[int]struct {
		result1 []worker.Worker
		result2 error
	}
	NewGardenWorkerStub        func(lager.Logger, clock.Clock, db.Worker, int) worker.Worker
	newGardenWorkerMutex       sync.RWMutex
	newGardenWorkerArgsForCall []struct {
		arg1 lager.Logger
		arg2 clock.Clock
		arg3 db.Worker
		arg4 int
	}
	newGardenWorkerReturns struct {
		result1 worker.Worker
	}
	newGardenWorkerReturnsOnCall map[int]struct {
		result1 worker.Worker
	}
	RunningWorkersStub        func(lager.Logger) ([]worker.Worker, error)
	runningWorkersMutex       sync.RWMutex
	runningWorkersArgsForCall []struct {
		arg1 lager.Logger
	}
	runningWorkersReturns struct {
		result1 []worker.Worker
		result2 error
	}
	runningWorkersReturnsOnCall map[int]struct {
		result1 []worker.Worker
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWorkerProvider) FindWorkerForContainer(arg1 lager.Logger, arg2 int, arg3 string) (worker.Worker, bool, error) {
	fake.findWorkerForContainerMutex.Lock()
	ret, specificReturn := fake.findWorkerForContainerReturnsOnCall[len(fake.findWorkerForContainerArgsForCall)]
	fake.findWorkerForContainerArgsForCall = append(fake.findWorkerForContainerArgsForCall, struct {
		arg1 lager.Logger
		arg2 int
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("FindWorkerForContainer", []interface{}{arg1, arg2, arg3})
	fake.findWorkerForContainerMutex.Unlock()
	if fake.FindWorkerForContainerStub != nil {
		return fake.FindWorkerForContainerStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.findWorkerForContainerReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeWorkerProvider) FindWorkerForContainerCallCount() int {
	fake.findWorkerForContainerMutex.RLock()
	defer fake.findWorkerForContainerMutex.RUnlock()
	return len(fake.findWorkerForContainerArgsForCall)
}

func (fake *FakeWorkerProvider) FindWorkerForContainerCalls(stub func(lager.Logger, int, string) (worker.Worker, bool, error)) {
	fake.findWorkerForContainerMutex.Lock()
	defer fake.findWorkerForContainerMutex.Unlock()
	fake.FindWorkerForContainerStub = stub
}

func (fake *FakeWorkerProvider) FindWorkerForContainerArgsForCall(i int) (lager.Logger, int, string) {
	fake.findWorkerForContainerMutex.RLock()
	defer fake.findWorkerForContainerMutex.RUnlock()
	argsForCall := fake.findWorkerForContainerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeWorkerProvider) FindWorkerForContainerReturns(result1 worker.Worker, result2 bool, result3 error) {
	fake.findWorkerForContainerMutex.Lock()
	defer fake.findWorkerForContainerMutex.Unlock()
	fake.FindWorkerForContainerStub = nil
	fake.findWorkerForContainerReturns = struct {
		result1 worker.Worker
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeWorkerProvider) FindWorkerForContainerReturnsOnCall(i int, result1 worker.Worker, result2 bool, result3 error) {
	fake.findWorkerForContainerMutex.Lock()
	defer fake.findWorkerForContainerMutex.Unlock()
	fake.FindWorkerForContainerStub = nil
	if fake.findWorkerForContainerReturnsOnCall == nil {
		fake.findWorkerForContainerReturnsOnCall = make(map[int]struct {
			result1 worker.Worker
			result2 bool
			result3 error
		})
	}
	fake.findWorkerForContainerReturnsOnCall[i] = struct {
		result1 worker.Worker
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeWorkerProvider) FindWorkersForContainerByOwner(arg1 lager.Logger, arg2 db.ContainerOwner) ([]worker.Worker, error) {
	fake.findWorkersForContainerByOwnerMutex.Lock()
	ret, specificReturn := fake.findWorkersForContainerByOwnerReturnsOnCall[len(fake.findWorkersForContainerByOwnerArgsForCall)]
	fake.findWorkersForContainerByOwnerArgsForCall = append(fake.findWorkersForContainerByOwnerArgsForCall, struct {
		arg1 lager.Logger
		arg2 db.ContainerOwner
	}{arg1, arg2})
	fake.recordInvocation("FindWorkersForContainerByOwner", []interface{}{arg1, arg2})
	fake.findWorkersForContainerByOwnerMutex.Unlock()
	if fake.FindWorkersForContainerByOwnerStub != nil {
		return fake.FindWorkersForContainerByOwnerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findWorkersForContainerByOwnerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWorkerProvider) FindWorkersForContainerByOwnerCallCount() int {
	fake.findWorkersForContainerByOwnerMutex.RLock()
	defer fake.findWorkersForContainerByOwnerMutex.RUnlock()
	return len(fake.findWorkersForContainerByOwnerArgsForCall)
}

func (fake *FakeWorkerProvider) FindWorkersForContainerByOwnerCalls(stub func(lager.Logger, db.ContainerOwner) ([]worker.Worker, error)) {
	fake.findWorkersForContainerByOwnerMutex.Lock()
	defer fake.findWorkersForContainerByOwnerMutex.Unlock()
	fake.FindWorkersForContainerByOwnerStub = stub
}

func (fake *FakeWorkerProvider) FindWorkersForContainerByOwnerArgsForCall(i int) (lager.Logger, db.ContainerOwner) {
	fake.findWorkersForContainerByOwnerMutex.RLock()
	defer fake.findWorkersForContainerByOwnerMutex.RUnlock()
	argsForCall := fake.findWorkersForContainerByOwnerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeWorkerProvider) FindWorkersForContainerByOwnerReturns(result1 []worker.Worker, result2 error) {
	fake.findWorkersForContainerByOwnerMutex.Lock()
	defer fake.findWorkersForContainerByOwnerMutex.Unlock()
	fake.FindWorkersForContainerByOwnerStub = nil
	fake.findWorkersForContainerByOwnerReturns = struct {
		result1 []worker.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkerProvider) FindWorkersForContainerByOwnerReturnsOnCall(i int, result1 []worker.Worker, result2 error) {
	fake.findWorkersForContainerByOwnerMutex.Lock()
	defer fake.findWorkersForContainerByOwnerMutex.Unlock()
	fake.FindWorkersForContainerByOwnerStub = nil
	if fake.findWorkersForContainerByOwnerReturnsOnCall == nil {
		fake.findWorkersForContainerByOwnerReturnsOnCall = make(map[int]struct {
			result1 []worker.Worker
			result2 error
		})
	}
	fake.findWorkersForContainerByOwnerReturnsOnCall[i] = struct {
		result1 []worker.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkerProvider) NewGardenWorker(arg1 lager.Logger, arg2 clock.Clock, arg3 db.Worker, arg4 int) worker.Worker {
	fake.newGardenWorkerMutex.Lock()
	ret, specificReturn := fake.newGardenWorkerReturnsOnCall[len(fake.newGardenWorkerArgsForCall)]
	fake.newGardenWorkerArgsForCall = append(fake.newGardenWorkerArgsForCall, struct {
		arg1 lager.Logger
		arg2 clock.Clock
		arg3 db.Worker
		arg4 int
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("NewGardenWorker", []interface{}{arg1, arg2, arg3, arg4})
	fake.newGardenWorkerMutex.Unlock()
	if fake.NewGardenWorkerStub != nil {
		return fake.NewGardenWorkerStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.newGardenWorkerReturns
	return fakeReturns.result1
}

func (fake *FakeWorkerProvider) NewGardenWorkerCallCount() int {
	fake.newGardenWorkerMutex.RLock()
	defer fake.newGardenWorkerMutex.RUnlock()
	return len(fake.newGardenWorkerArgsForCall)
}

func (fake *FakeWorkerProvider) NewGardenWorkerCalls(stub func(lager.Logger, clock.Clock, db.Worker, int) worker.Worker) {
	fake.newGardenWorkerMutex.Lock()
	defer fake.newGardenWorkerMutex.Unlock()
	fake.NewGardenWorkerStub = stub
}

func (fake *FakeWorkerProvider) NewGardenWorkerArgsForCall(i int) (lager.Logger, clock.Clock, db.Worker, int) {
	fake.newGardenWorkerMutex.RLock()
	defer fake.newGardenWorkerMutex.RUnlock()
	argsForCall := fake.newGardenWorkerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeWorkerProvider) NewGardenWorkerReturns(result1 worker.Worker) {
	fake.newGardenWorkerMutex.Lock()
	defer fake.newGardenWorkerMutex.Unlock()
	fake.NewGardenWorkerStub = nil
	fake.newGardenWorkerReturns = struct {
		result1 worker.Worker
	}{result1}
}

func (fake *FakeWorkerProvider) NewGardenWorkerReturnsOnCall(i int, result1 worker.Worker) {
	fake.newGardenWorkerMutex.Lock()
	defer fake.newGardenWorkerMutex.Unlock()
	fake.NewGardenWorkerStub = nil
	if fake.newGardenWorkerReturnsOnCall == nil {
		fake.newGardenWorkerReturnsOnCall = make(map[int]struct {
			result1 worker.Worker
		})
	}
	fake.newGardenWorkerReturnsOnCall[i] = struct {
		result1 worker.Worker
	}{result1}
}

func (fake *FakeWorkerProvider) RunningWorkers(arg1 lager.Logger) ([]worker.Worker, error) {
	fake.runningWorkersMutex.Lock()
	ret, specificReturn := fake.runningWorkersReturnsOnCall[len(fake.runningWorkersArgsForCall)]
	fake.runningWorkersArgsForCall = append(fake.runningWorkersArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.recordInvocation("RunningWorkers", []interface{}{arg1})
	fake.runningWorkersMutex.Unlock()
	if fake.RunningWorkersStub != nil {
		return fake.RunningWorkersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.runningWorkersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWorkerProvider) RunningWorkersCallCount() int {
	fake.runningWorkersMutex.RLock()
	defer fake.runningWorkersMutex.RUnlock()
	return len(fake.runningWorkersArgsForCall)
}

func (fake *FakeWorkerProvider) RunningWorkersCalls(stub func(lager.Logger) ([]worker.Worker, error)) {
	fake.runningWorkersMutex.Lock()
	defer fake.runningWorkersMutex.Unlock()
	fake.RunningWorkersStub = stub
}

func (fake *FakeWorkerProvider) RunningWorkersArgsForCall(i int) lager.Logger {
	fake.runningWorkersMutex.RLock()
	defer fake.runningWorkersMutex.RUnlock()
	argsForCall := fake.runningWorkersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeWorkerProvider) RunningWorkersReturns(result1 []worker.Worker, result2 error) {
	fake.runningWorkersMutex.Lock()
	defer fake.runningWorkersMutex.Unlock()
	fake.RunningWorkersStub = nil
	fake.runningWorkersReturns = struct {
		result1 []worker.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkerProvider) RunningWorkersReturnsOnCall(i int, result1 []worker.Worker, result2 error) {
	fake.runningWorkersMutex.Lock()
	defer fake.runningWorkersMutex.Unlock()
	fake.RunningWorkersStub = nil
	if fake.runningWorkersReturnsOnCall == nil {
		fake.runningWorkersReturnsOnCall = make(map[int]struct {
			result1 []worker.Worker
			result2 error
		})
	}
	fake.runningWorkersReturnsOnCall[i] = struct {
		result1 []worker.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkerProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findWorkerForContainerMutex.RLock()
	defer fake.findWorkerForContainerMutex.RUnlock()
	fake.findWorkersForContainerByOwnerMutex.RLock()
	defer fake.findWorkersForContainerByOwnerMutex.RUnlock()
	fake.newGardenWorkerMutex.RLock()
	defer fake.newGardenWorkerMutex.RUnlock()
	fake.runningWorkersMutex.RLock()
	defer fake.runningWorkersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWorkerProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ worker.WorkerProvider = new(FakeWorkerProvider)
