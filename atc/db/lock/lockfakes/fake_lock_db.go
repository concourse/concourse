// Code generated by counterfeiter. DO NOT EDIT.
package lockfakes

import (
	"sync"

	"github.com/concourse/concourse/atc/db/lock"
)

type FakeLockDB struct {
	AcquireStub        func(lock.LockID) (bool, error)
	acquireMutex       sync.RWMutex
	acquireArgsForCall []struct {
		arg1 lock.LockID
	}
	acquireReturns struct {
		result1 bool
		result2 error
	}
	acquireReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	ReleaseStub        func(lock.LockID) (bool, error)
	releaseMutex       sync.RWMutex
	releaseArgsForCall []struct {
		arg1 lock.LockID
	}
	releaseReturns struct {
		result1 bool
		result2 error
	}
	releaseReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLockDB) Acquire(arg1 lock.LockID) (bool, error) {
	fake.acquireMutex.Lock()
	ret, specificReturn := fake.acquireReturnsOnCall[len(fake.acquireArgsForCall)]
	fake.acquireArgsForCall = append(fake.acquireArgsForCall, struct {
		arg1 lock.LockID
	}{arg1})
	stub := fake.AcquireStub
	fakeReturns := fake.acquireReturns
	fake.recordInvocation("Acquire", []interface{}{arg1})
	fake.acquireMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLockDB) AcquireCallCount() int {
	fake.acquireMutex.RLock()
	defer fake.acquireMutex.RUnlock()
	return len(fake.acquireArgsForCall)
}

func (fake *FakeLockDB) AcquireCalls(stub func(lock.LockID) (bool, error)) {
	fake.acquireMutex.Lock()
	defer fake.acquireMutex.Unlock()
	fake.AcquireStub = stub
}

func (fake *FakeLockDB) AcquireArgsForCall(i int) lock.LockID {
	fake.acquireMutex.RLock()
	defer fake.acquireMutex.RUnlock()
	argsForCall := fake.acquireArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLockDB) AcquireReturns(result1 bool, result2 error) {
	fake.acquireMutex.Lock()
	defer fake.acquireMutex.Unlock()
	fake.AcquireStub = nil
	fake.acquireReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeLockDB) AcquireReturnsOnCall(i int, result1 bool, result2 error) {
	fake.acquireMutex.Lock()
	defer fake.acquireMutex.Unlock()
	fake.AcquireStub = nil
	if fake.acquireReturnsOnCall == nil {
		fake.acquireReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.acquireReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeLockDB) Release(arg1 lock.LockID) (bool, error) {
	fake.releaseMutex.Lock()
	ret, specificReturn := fake.releaseReturnsOnCall[len(fake.releaseArgsForCall)]
	fake.releaseArgsForCall = append(fake.releaseArgsForCall, struct {
		arg1 lock.LockID
	}{arg1})
	stub := fake.ReleaseStub
	fakeReturns := fake.releaseReturns
	fake.recordInvocation("Release", []interface{}{arg1})
	fake.releaseMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLockDB) ReleaseCallCount() int {
	fake.releaseMutex.RLock()
	defer fake.releaseMutex.RUnlock()
	return len(fake.releaseArgsForCall)
}

func (fake *FakeLockDB) ReleaseCalls(stub func(lock.LockID) (bool, error)) {
	fake.releaseMutex.Lock()
	defer fake.releaseMutex.Unlock()
	fake.ReleaseStub = stub
}

func (fake *FakeLockDB) ReleaseArgsForCall(i int) lock.LockID {
	fake.releaseMutex.RLock()
	defer fake.releaseMutex.RUnlock()
	argsForCall := fake.releaseArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLockDB) ReleaseReturns(result1 bool, result2 error) {
	fake.releaseMutex.Lock()
	defer fake.releaseMutex.Unlock()
	fake.ReleaseStub = nil
	fake.releaseReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeLockDB) ReleaseReturnsOnCall(i int, result1 bool, result2 error) {
	fake.releaseMutex.Lock()
	defer fake.releaseMutex.Unlock()
	fake.ReleaseStub = nil
	if fake.releaseReturnsOnCall == nil {
		fake.releaseReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.releaseReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeLockDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.acquireMutex.RLock()
	defer fake.acquireMutex.RUnlock()
	fake.releaseMutex.RLock()
	defer fake.releaseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLockDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ lock.LockDB = new(FakeLockDB)
