#language anatomy

\use{\load{concourse/docs}}

\template{\load{concourse/docs-template}}

\title{Tasks}{running-tasks}

The smallest configurable unit in a Concourse pipeline is a single task. A task
can be thought of as a function from \reference{inputs} to \reference{outputs}
that can either succeed or fail.

Going a bit further, ideally tasks are \italic{pure} functions: given the same
set of inputs, it should either always succeed with the same outputs or always
fail. This is entirely up to your script's level of discipline, however. Flaky
tests or dependencies on the internet are the most common source of impurity.

Once you have a running Concourse deployment, you can start configuring your
tasks and executing them interactively from your terminal with the
\reference{fly-cli}{Fly} commandline tool.

Once you've figured out your tasks's configuration, you can reuse it for a
\reference{jobs}{Job} in your \reference{pipelines}{Pipeline}.

\section{Configuring a Task}{configuring-tasks}{
  Conventionally a task's configuration is placed in the same repository as the
  code it's testing, possibly under some \code{ci} directory. For a simple Ruby
  app with unit tests it may be called \code{ci/unit.yml}, and looks something
  like:

  \titled-codeblock{task.yml}{yaml}{
  ---
  platform: linux

  image_resource:
    type: docker-image
    source:
      repository: ruby
      tag: '2.1'

  inputs:
  - name: my-app

  run:
    path: my-app/scripts/test
  }

  This configuration specifies that the task must run with the
  \code{ruby:2.1} Docker image with a \code{my-app} input, and when the task
  is executed it will run the \code{scripts/test} script in the same repo.

  A task's configuration specifies the following:

  \define-attribute{platform: string}{
    \italic{Required.} The platform the task should run on. By convention,
    \code{windows}, \code{linux}, or \code{darwin} are specified. This determines
    the pool of workers that the task can run against. The base deployment
    provides Linux workers.
  }

  \define-attribute{image_resource: object}{
    \italic{Optional.} The base image of the container. This style of
    specifying the base image has the same effect as \code{image:} above but
    uses Concourse resources to download the image.  The contents of this field
    should be the same as a resource configuration in your pipeline (without
    the \code{name}).

    The following example configures the task to use the \code{golang:1.6}
    Docker image:

    \codeblock{yaml}{
    image_resource:
      type: docker-image
      source: \{repository: golang, tag: "1.6"\}
    }

    ...and the following example uses an insecure private Docker registry with
    a username and password:

    \codeblock{yaml}{
    image_resource:
      type: docker-image
      source:
        repository: my.local.registry:8080/my/image
        insecure_registries: ["my.local.registry:8080"]
        username: myuser
        password: mypass
        email: x@x.com
    }

    You can use any resource that returns a filesystem in the correct format (a
    \code{/rootfs} directory and a \code{metadata.json} file in the top level)
    but normally this will be the
    \hyperlink{https://github.com/concourse/docker-image-resource}{Docker Image
    resource}. If you'd like to make a resource of your own that supports this
    please use that as a reference implementation for now.
    
    If you want to use an artifact source within the plan containing an image, 
    you must set the \reference{task-image} in the plan step instead.
  }

  \define-attribute{image: string}{task-config-image}{
    \italic{Optional.} A string specifying the rootfs of the container, as
    interpreted by your worker's Garden backend.

    You should only use this if you cannot use \reference{image_resource} for
    some reason, and you know what you're doing.
  }

  \define-attribute{inputs: [object]}{
    \italic{Optional.} The expected set of inputs for the task.

    This determines which artifacts will propagate into the task, as the
    \reference{build-plans}{build plan} executes. If any specified inputs
    are not present, the task will end with an error, without running.

    Each input has the following attributes:

    \inset{
      \define-attribute{name: string}{
        \italic{Required.} The logical name of the input.
      }

      \define-attribute{path: string}{
        \italic{Optional.} The path where the input will be placed. If not
        specified, the input's \code{name} is used.
      }
    }
  }

  \define-attribute{outputs: [object]}{
    \italic{Optional.} The artifacts produced by the task.

    Each output configures a directory to make available to later steps in the
    \reference{build-plans}{build plan}. The directory will be automatically
    created before the task runs, and the task should place any artifacts it
    wants to export in the directory.

    Each output has the following attributes:

    \inset{
      \define-attribute{name: string}{
        \italic{Required.} The logical name of the output. The contents under
        \code{path} will be made available to the rest of the plan under this
        name.
      }

      \define-attribute{path: string}{
        \italic{Optional.} The path to a directory where the output will be
        taken from. If not specified, the output's \code{name} is used.

        Note that this value \italic{must not overlap} with any other inputs or
        outputs. Each output results in a new empty directory that your task
        should place artifacts in; if the path overlaps it'll clobber whatever
        files used to be there.
      }
    }

    For example, the following task and script would be used to propagate a
    built binary to later steps:

    \codeblock{yaml}{
    ---
    platform: linux

    image_resource: # ...

    inputs:
    - name: project-src

    outputs:
    - name: built-project

    run:
      path: project-src/ci/build
    }

    ...assuming \code{project-src/ci/build} looks something like:

    \codeblock{bash}{
    #!/bin/bash

    set -e -u -x

    export GOPATH=$PWD/project-src

    go build -o built-project/my-project github.com/concourse/my-project
    }

    ...this task could then be used in a \reference{build-plans}{build plan}
    like so:

    \codeblock{yaml}{
    plan:
    - get: project-src
    - task: build-bin
      file: project-src/ci/build.yml
    - put: project-bin
      params: {file: built-project/my-project}
    }
  }

  \define-attribute{run: object}{task-run}{
    \italic{Required.} The command to execute in the container.

    \inset{
      \define-attribute{path: string}{task-run-path}{
        \italic{Required.} The command to execute, relative to the task's
        working directory. For a script living in a resource's repo, you must
        specify the full path to the resource, i.e.
        \code{my-resource/scripts/test}.
      }

      \define-attribute{args: [string]}{task-run-args}{
        \italic{Optional.} Arguments to pass to the command. Note that when
        executed with Fly, any arguments passed to Fly are appended to this
        array.
      }

      \define-attribute{dir: string}{task-run-dir}{
        \italic{Optional.} A directory, relative to the initial working
        directory, to set as the working directory when running the script.
      }

      \define-attribute{user: string}{task-run-user}{
        \italic{Optional.} Explicitly set the user to run as. If not specified,
        this defaults to the user configured by the task's image. If not
        specified there, it's up to the Garden backend, and may be e.g.
        \code{root} on Linux.
      }
    }

    Note that this is \italic{not} provided as a script blob, but explicit
    \code{path} and \code{args} values; this allows \code{fly} to forward
    arguments to the script, and forces your config \code{.yml} to stay fairly
    small.
  }

  \define-attribute{params: \{string: string\}}{
    \italic{Optional.} A key-value mapping of values that are exposed to the
    task via environment variables.

    Use this to provide things like credentials, not to set up the task's
    Bash environment (they do not support interpolation).
  }
}

\section{Anatomy of a running task}{task-anatomy}{
  A task runs in a new container every time, using the image provided by
  \reference{image_resource} as its base filesystem (i.e. \code{/}).

  The command specified by \reference{task-run} will be executed in a working
  directory containing each of the \reference{inputs}. If any inputs are
  missing the task will not run (and the container will not even be created).

  The working directory will also contain empty directories for each of the
  \reference{outputs}. The task must place artifacts in the output directories
  for them to be exported. This meshes well with build tools with configurable
  destination paths.

  \margin-note{
    If your build tools don't support output paths you'll have to copy bits
    around. If it's a \code{git} repo that you're modifying you can do a local
    \code{git clone ./input ./output}, which is much more efficient than
    \code{cp}, and then work out of \code{./output}.
  }

  Any \reference{task-params} configured will be set in the environment for the
  task's command, along with any environment variables provided by the task's
  image (i.e. \code{ENV} rules from your \code{Dockerfile}).

  The user the command runs as is determined by the image. If you're using the
  \hyperlink{https://github.com/concourse/docker-image-resource}{Docker Image
  resource}, this will be the user set by a \code{USER} rule in your
  \code{Dockerfile}, or \code{root} if not specified.

  Another relevant bit of configuration is \reference{privileged}, which
  determines whether the user the task runs as will have full privileges
  (primarily when running as \code{root}). This is intentionally \italic{not}
  configurable by the task itself, to prevent privilege escalation by way of
  pull requests to repositories containing task configs.

  Putting all this together, the following task config:

  \codeblock{yaml}{
  ---
  platform: linux

  image_resource:
    type: docker-image
    source:
      repository: golang
      tag: '1.6'

  params:
    SOME_PARAM: some-default-value

  inputs:
  - name: some-input
  - name: some-input-with-custom-path
    path: some/custom/path

  outputs:
  - name: some-output

  run:
    path: sh
    args:
    - -exc
    - |
      whoami
      env
      go version
      find .
      touch some-output/my-built-artifact
  }

  ...will produce the following output:

  \codeblock{bash}{
    + whoami
    root
    + env
    USER=root
    HOME=/root
    GOLANG_DOWNLOAD_SHA256=5470eac05d273c74ff8bac7bef5bad0b5abbd1c4052efbdbc8db45332e836b0b
    PATH=/go/bin:/usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    GOPATH=/go
    PWD=/tmp/build/e55deab7
    GOLANG_DOWNLOAD_URL=https://golang.org/dl/go1.6.linux-amd64.tar.gz
    GOLANG_VERSION=1.6
    SOME_PARAM=some-default-value
    + go version
    go version go1.6 linux/amd64
    + find .
    .
    ./some-input
    ./some-input/foo
    ./some
    ./some/custom
    ./some/custom/path
    ./some/custom/path/bar
    ./some-output
    + touch some-output/my-built-artifact
  }

  ...and propagate \code{my-built-artifact} to any later \reference{task-step}s
  or \reference{put-step}s that reference the \code{some-output} artifact, in
  the same way that this task had \code{some-input} as an input.
}

\section{Running tasks with \code{fly}}{
  \reference{fly-cli}{Fly} is a command-line tool that can be used to execute
  a task configuration against a Concourse deployment. This provides a fast
  feedback loop for iterating on the task configuration and your code.

  For more information, see \reference{fly-execute}.
}
