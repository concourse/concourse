#language anatomy

\use{\load{concourse/docs}}

\template{\load{concourse/docs-template}}

\title{The Fly CLI}{fly-cli}

The \code{fly} tool is a command line interface to Concourse. It is used for
a number of tasks from connecting to a shell in one of your build's
containers to uploading new pipeline configuration into a running Concourse.
Learning how to use \code{fly} will make using Concourse faster and more
useful.

You can download \code{fly} from a Concourse. There are download links for
common platforms in the bottom right hand corner of the main page.

Throughout this section we'll stick to the long-form name of every command and
flag. Once you've learned what the commands do, you may want to consult
\code{fly -h} to learn the short forms.

\table-of-contents

\section{\code{login}\aux{: Authenticating with and saving Concourse targets}}{fly-login}{
  The first thing you'll want to do is authenticate with your target. This is
  done with the \reference{fly-login} command. This is also useful to save
  targets under a more convenient alias, so you don't have to type out the URL
  all the time:

  The \code{login} command serves double duty: it authenticates with a given
  endpoint, and saves it under a more convenient name. The name and token are
  stored in \code{~/.flyrc} (though you shouldn't really edit the file
  manually).

  Concourse deployments can be occupied by multiple \reference{teams}{teams}.
  To specify the team to which to log in, specify the \code{--team-name} or
  \code{-n} flag. If not specified, this defaults to
  \reference{main-team}{\code{main}}.

  So, to log in to a team \code{my-team} an endpoint served at
  \code{https://ci.example.com} and save it as the more convenient name
  \code{example}, you would run:

  \codeblock{bash}{
  $ fly --target example login --team-name my-team \\
      --concourse-url https://ci.example.com
  }

  The \code{login} command will see which authentication methods are available
  for the specified team and prompt you to choose one. For basic auth, it will
  ask your username and password and use them to acquire a token. For OAuth, it
  will give you a link to click, and after you've gone through the OAuth flow
  it will print an OAuth token on the page that you can then then copy and
  paste into the prompt.

  Note that if no authentication methods are configured (e.g. when targeting a
  \code{concourse/lite} Vagrant box), \code{fly} will acquire a token without
  any prompting. You can then use the alias like normal.

  In any case, a token is saved in your \code{~/.flyrc}, which will expire
  after one day.

  If your Concourse uses SSL but does not have a certificate signed by a
  trusted CA, you can use the \code{--ca-cert} flag so that \code{fly} can
  trust the connection, like so:

  \codeblock{bash}{
  $ fly -t example login -c https://ci.example.com --ca-cert ./ca.crt
  }

  This will read the value out of the file \code{./ca.crt} and save it into
  \code{~/.flyrc} so you don't have to pass it on every \code{login}
  invocation.

  After you've logged in you can use \code{--target example} (or \code{-t
  example} for short) to run a command against the saved target \code{example}.
  For eample, \code{fly -t example builds} will list the last few builds on the
  \code{example} Concourse instance.
}

\section{\code{targets}\aux{: List the current targets}}{fly-targets}{
  To see what targets are currently known to \code{fly}, run:

  \codeblock{bash}{
  $ fly targets
  }

  This will show each target's name, URL, and when its token expires.
}

\section{\code{sync}\aux{: Update your local copy of \code{fly}}}{fly-sync}{
  Occasionally we add additional features to \code{fly} or make changes to the
  communiction between it and Concourse's API server. To make sure you're
  running the latest and greatest version that works with the Concourse you
  are targeting we provide a command called \code{sync} that will update your
  local \code{fly}. It can be used like so:

  \codeblock{bash}{
  $ fly -t example sync
  }

  If you see anything odd, for example the output of builds not rendering or
  certain commands throwing errors, be sure to run this command before
  investigating any further; it's pretty likely that something has changed with
  the API, especially while we're pre-1.0.
}

\section{\code{set-team}\aux{: Creating and updating teams}}{fly-set-team}{
  To create a new team or update an existing team's auth, first log in as the
  \reference{main-team}{\code{main} team}, and then run:

  \codeblock{bash}{
  $ fly -t example set-team --team-name my-team \\
      --basic-auth-username foo \\
      --basic-auth-password bar
  }

  Teams can also update their own configuration with the same command.

  There are many different ways to configure auth; see
  \reference{authentication} for more information.
}

\section{\code{execute}\aux{: Submitting Local Tasks}}{fly-execute}{
  \omit-children-from-table-of-contents

  One of the most common use cases of \code{fly} is taking a local project on
  your computer and submitting it up with a task configuration to be run
  inside a container in Concourse. This is useful to build Linux projects on
  OS X or to avoid all of those debugging commits when something is configured
  differently between your local and remote setup.

  You can execute a task like this:

  \codeblock{bash}{
  $ fly -t example execute --config tests.yml
  }

  Your files will be uploaded and the task will be executed with them. The
  working directory name will be used as the input name. If they do not match,
  you must specify \code{-i name=.} instead, where \code{name} is the input
  name from the task configuration.

  Fly will automatically capture \code{SIGINT} and \code{SIGTERM} and abort the
  build when received. This allows it to be transparently composed with other
  toolchains.

  If you have many extra files or large files in your current directory that
  would normally be ignored by your version control system, then you can use
  the \code{-x} or \code{--exclude-ignored} flags in order to limit the files
  that you send to Concourse to just those that are not ignored.

  If your task needs to run as \code{root} then you can specify the \code{-p}
  or \code{--privileged} flag.

  \section{Providing multiple inputs}{
    Tasks in Concourse can take multiple inputs. Up until now we've just been
    submitting a single input (our current working directory) that has the same
    name as the directory.

    Tasks must specify the inputs that they require (for more information, refer
    to the \reference{configuring-tasks}{configuring tasks} documentation). For
    \code{fly} to upload these inputs you can use the \code{-i} or
    \code{--input} arguments with name and path pairs. For example:

    \codeblock{bash}{
    $ fly -t example execute --input code=. --input stemcells=../stemcells
    }

    This would work together with a \code{task.yml} if its \code{inputs:}
    section was as follows:

    \codeblock{yaml}{
    inputs:
    - name: code
    - name: stemcells
    }

    If you specify an input then the default input will no longer be added
    automatically and you will need to explicitly list it (as with the
    \code{code} input above).

    This feature can be used to mimic other resources and try out combinations
    of input that would normally not be possible in a pipeline.
  }

  \section{Basing inputs on a job in your pipeline with \code{--inputs-from}}{
    If the \code{--inputs-from} flag is given, the specified job will be looked
    up in the pipeline, and the one-off build will base its inputs on those
    currently configured for the job.

    If any \code{--input} flags are given (see above), they will override the
    base set of inputs.

    For example:

    \codeblock{bash}{
    $ fly -t example execute --config task.yml --inputs-from main/integration --input foo=./foo
    }

    This will trigger a one-off-build using the \code{task.yml} task
    config, basing its inputs on the latest candidates for the
    \code{integration} job in the \code{main} pipeline, with the \code{foo}
    input overridden to specify local code to run.

    This can be used to more closely replicate the state in CI when weeding out
    flakiness, or as a shortcut for local development so that you don't have to
    upload every single resource from your local machine.
  }

  \section{Taking artifacts from the build with \code{--output}}{
    If a task specifies outputs then you're able to extract these back out of
    the build and back to your local system. For example:

    \codeblock{bash}{
    $ fly -t example execute --input code=. --config build-stemcell.yml --output stemcell=/tmp/stemcell
    }

    This would work together with a \code{task.yml} if its \code{outputs:}
    section was as follows:

    \codeblock{yaml}{
    outputs:
    - name: stemcell
    }

    This feature is useful to farm work out to your Concourse server to build
    things in a repeatable manner.
  }

  \section{Providing values for \code{params}}{
    Any params listed in the task configuration can be specified by using
    environment variables.

    So, if you have a task with the following params:

    \codeblock{yaml}{
    params:
      FOO: fizzbuzz
      BAR:
    }

    ...and you run:

    \codeblock{bash}{
      BAR=hello fly execute
    }

    The task would then run with \code{BAR} as \code{"hello"}, and \code{FOO}
    as \code{"fizzbuzz"} (its default value).
  }
}

\section{\code{pipelines}\aux{: Listing configured pipelines}}{fly-pipelines}{
  To list the currently-configured pipelines and their paused state, run:

  \codeblock{bash}{
  $ fly -t example pipelines
  }
}

\section{\code{rename-pipeline}\aux{: Rename a pipeline}}{fly-rename-pipeline}{
  To rename a pipeline, run:

  \codeblock{bash}{
  $ fly -t example rename-pipeline --old-name my-pipeline --new-name my-cool-pipeline
  }
}

\section{\code{pause-pipeline}\aux{: Preventing new pipeline activity}}{fly-pause-pipeline}{
  To pause a pipeline, run:

  \codeblock{bash}{
  $ fly -t example pause-pipeline --pipeline my-pipeline
  }

  This will prevent jobs from being scheduled and stop the periodic checking
  for new versions of resources. Builds that are in-flight will still finish.
}

\section{\code{unpause-pipeline}\aux{: Resuming pipeline activity}}{fly-unpause-pipeline}{
  To unpause a pipeline, run:

  \codeblock{bash}{
  $ fly -t example unpause-pipeline --pipeline my-pipeline
  }

  This will resume job scheduling and resource checking.
}

\section{\code{expose-pipeline}\aux{: Making a pipeline publicly viewable}}{fly-expose-pipeline}{
  By default, newly configured pipelines are only visible to the pipeline's
  team. To make a pipeline viewable by other teams and unauthenticated users,
  run:

  \codeblock{bash}{
  $ fly -t example expose-pipeline --pipeline my-pipeline
  }

 This feature is useful if you're using Concourse for an open source project
 and you'd like your community to be able to see into your build pipeline.

 To undo this change, see \reference{fly-hide-pipeline}.

 Note that exposing a pipeline simply makes it possible to view the pipeline
 itself, which will only show the name and status of each job. Build output
 will remain hidden by default unless the job configures
 \reference{public}{\code{public: true}}.
}

\section{\code{hide-pipeline}\aux{: Hiding a pipeline from the public}}{fly-hide-pipeline}{
  If you realize that you've made a terrible mistake in
  \reference{fly-expose-pipeline}{exposing your pipeline}, you can run:

  \codeblock{bash}{
  $ fly -t example hide-pipeline --pipeline my-pipeline
  }

  If you're panicking you can run the command's short form, \code{hp}, instead.
}

\section{\code{get-pipeline}\aux{: Fetching a pipeline's configuration}}{fly-get-pipeline}{
  Fly can be used to fetch and update the configuration for your pipelines. This
  is achieved by using the \reference{fly-get-pipeline} and
  \reference{fly-set-pipeline} commands. For example, to fetch the current
  configuration of your \code{my-pipeline} Concourse pipeline and print it on
  \code{STDOUT} run the following:

  \codeblock{bash}{
  $ fly -t example get-pipeline --pipeline my-pipeline
  }

  To get JSON instead of YAML you can use the \code{-j} or \code{--json}
  argument. This can be useful when inspecting your config with
  \hyperlink{http://stedolan.github.io/jq/}{jq}.
}

\section{\code{set-pipeline}\aux{: Configuring Pipelines}}{fly-set-pipeline}{
  \omit-children-from-table-of-contents

  To submit a pipeline configuration to Concourse from a file on your local disk
  you can use the \code{-c} or \code{--config} flag, like so:

  \codeblock{bash}{
  $ fly -t example set-pipeline --config pipeline.yml --pipeline my-pipeline
  }

  This will present a diff of the changes and ask you to confirm the changes.
  If you accept then Concourse's pipeline configuration will switch to the
  pipeline definition in the YAML file specified.

  Note the use of the short flags, just to make it more obfuscated.

  \section{Using \code{\{\{parameters\}\}}}{parameters}{
    The pipeline configuration can contain template variable in the form of
    \code{\{\{foo-bar\}\}}. They will be replaced with string values populated
    by repeated \code{--var} or \code{--load-vars-from} flags.

    This allows for credentials to be extracted from a pipeline config, making it
    safe to check in to a public repository or pass around.

    For example, if you have a \code{pipeline.yml} as follows:

    \codeblock{yaml}{
    resources:
    - name: private-repo
      type: git
      source:
        uri: git@...
        branch: master
        private_key: \{\{private-repo-key\}\}
    }

    ...you could then configure this pipeline like so:

    \codeblock{bash}{
    $ fly -t example set-pipeline --pipeline my-pipeline --config pipeline.yml --var "private-repo-key=$(cat id_rsa)"
    }

    Or, if you had a \code{credentials.yml} as follows:

    \codeblock{yaml}{
    private-repo-key: |
      -----BEGIN RSA PRIVATE KEY-----
      ...
      -----END RSA PRIVATE KEY-----
    }

    ...you could configure it like so:

    \codeblock{bash}{
    $ fly -t example set-pipeline --pipeline my-pipeline --config pipeline.yml --load-vars-from credentials.yml
    }

    If both \code{--var} and \code{--load-vars-from} are specified, the \code{--var}
    flags take precedence.

    Note that only strings are supported for these values, so that
    interpolating them into the template is trivial. Other types of values, and
    features like concatenation, are not supported.
  }

  \section{Combining with \code{get-pipeline}}{
    You can use
    \hyperlink{https://en.wikipedia.org/wiki/Process_substitution}{process
    substitution} to quickly replicate a pipeline
    by composing \reference{fly-get-pipeline} and
    \reference{fly-set-pipeline} together like so:

    \codeblock{bash}{
    $ fly -t new set-pipeline -c <(fly -t old get-pipeline -p foo) -p foo
    }

    While this replication method may be useful for migrating pipelines
    between concourse instances, note the following caveats:

    \code{get-pipeline} fetches the current pipeline configuration with variables
    already interpolated. So you are working around any previous parameterization.

    Replicating a pipeline, unmodified, risks resource contention.
    For example, you could end up with two pipelines pushing to the same S3 bucket.

    If you're starting a new pipeline, we recommend you try to work through
    the above examples before using this one-step clone.
  }
}

\section{\code{destroy-pipeline}\aux{: Removing Pipelines}}{fly-destroy-pipeline}{
  Every now and then you just don't want a pipeline to be around anymore.
  Running \code{fly destroy-pipeline} will stop the pipeline activity and remove
  all data collected by the pipeline, including build history and collected
  versions.

  For example, to destroy the \code{my-pipeline} pipeline, you would run:

  \codeblock{bash}{
  $ fly -t example destroy-pipeline --pipeline my-pipeline
  }
}

\section{\code{trigger-job}\aux{: Triggering a new build of a job}}{fly-trigger-job}{
  To trigger a job, run:

  \codeblock{bash}{
  $ fly -t example trigger-job --job my-pipeline/my-job
  }

  This will enqueue a new build of the \code{my-job} job in the
  \code{my-pipeline} pipeline.

  To start watching the newly created build, append the \code{--watch} flag
  like so:

  \codeblock{bash}{
  $ fly -t example trigger-job --job my-pipeline/my-job --watch
  }
}

\section{\code{pause-job}\aux{: Preventing new job activity}}{fly-pause-job}{
  To pause a job, run:

  \codeblock{bash}{
  $ fly -t example pause-job --job my-pipeline/my-job
  }

  This will prevent pending builds of the job from being scheduled, though
  builds that are in-flight will still run, and pending builds will still be
  created as normal.
}

\section{\code{unpause-job}\aux{: Resuming job activity}}{fly-unpause-job}{
  To unpause a job, run:

  \codeblock{bash}{
  $ fly -t example unpause-job --job my-pipeline/my-job
  }

  This will resume scheduling of builds queued for the job.
}

\section{\code{check-resource}\aux{: Trigger discovery of new versions}}{fly-check-resource}{
  To force immediate checking for new versions of a resource, rather than
  waiting for the periodic checking, run:

  \codeblock{bash}{
  $ fly -t example check-resource --resource my-pipeline/my-resource
  }

  To check from a particular version, including the given version, append the
  \code{--from} flag like so:

  \codeblock{bash}{
  $ fly -t example check-resource --resource my-pipeline/my-resource \\
      --from ref:abcdef
  }

  This can be useful for collecting versions that are older than the current
  ones, given that a newly configured resource will only start from the latest
  version.

  Note the \code{ref:} prefix is resource-dependent. For example, the
  \italic{bosh-io-release} resource might use \code{version:11.2} in place of
  \code{ref:abcdef}.
}

\section{\code{pause-resource}\aux{: Prevent resource checks}}{fly-pause-resource}{
  To pause a resource, run:

  \codeblock{bash}{
  $ fly -t example pause-resource --resource my-pipeline/my-resource
  }

  This will stop the resource from detecting new versions.
}

\section{\code{unpause-resource}\aux{: Resume resource checks}}{fly-unpause-resource}{
  To unpause a resource, run:

  \codeblock{bash}{
  $ fly -t example unpause-resource --resource my-pipeline/my-resource
  }

  This will resume resource version detection.
}

\section{\code{builds}\aux{: Showing build history}}{fly-builds}{
  To list the most recent builds, run:

  \codeblock{bash}{
  $ fly -t example builds
  }

  To list the builds of a job, run:

  \codeblock{bash}{
  $ fly -t example builds -j pipeline-name/job-name
  }

  This can be useful for periodically monitoring the state of a job. The output
  also works well with tools like \code{awk} and \code{grep}.
}

\section{\code{abort-build}\aux{: Aborting a running build of a job}}{fly-abort-build}{
  To abort a build of a job, run:

  \codeblock{bash}{
  $ fly -t example abort-build --job my-pipeline/my-job --build 3
  }

  This will cancel build \code{3} of the \code{my-job} job in the
  \code{my-pipeline} pipeline.
}

\section{\code{containers}\aux{: Listing active containers}}{fly-containers}{
  To list the active containers across all your workers, run:

  \codeblock{bash}{
  $ fly -t example containers
  }

  This can be useful when discovering the containers available for
  \reference{fly-intercept}ing.
}

\section{\code{intercept}\aux{: Accessing a running or recent build's steps}}{fly-intercept}{
  Sometimes it's helpful to be on the same machine as your tasks so that you
  can profile or inspect them as they run or see the state the machine at the
  end of a run. Due to Concourse running tasks in containers on remote
  machines this would typically be hard to access.

  To this end, there is a \code{fly intercept} command that will give you an
  interactive shell inside the specified container. Containers are identified
  by a few things, so you may need to specify a few flags to hone down the
  results. If there are multiple containers that the flags could refer to, an
  interactive prompt will show up allowing you to disambiguate.

  \margin-note{
    The command \code{fly hijack} is an alias of \code{fly intercept}. Both can
    be used interchangably.
  }

  For example, running the following will run a task and then enter the
  finished task's container:

  \codeblock{bash}{
  $ fly -t example execute
  $ fly -t example intercept --step build
  }

  \margin-note{
    Be warned, if more than one person is using a Concourse server for running
    one-off builds then you may end up in a build that you did not expect!
  }

  Containers are around for a short time after a build finishes in order to
  allow people to intercept them.

  You can also intercept builds that were run in your pipeline. By using
  \code{--job}, \code{--build}, and \code{--step} you can intercept a specific
  step from a build of a job in your pipeline. These flags also have short
  forms, like so:

  \codeblock{bash}{
  $ fly -t example intercept -j some-pipeline/some-job -b some-build -s some-step
  }

  Note that \code{--build} can be omitted, and will default to the most recent
  build of the job. One-off builds can be reached by passing in their build ID
  to \code{--build} which can be found on the build list page.

  The \code{--step} flag can also be omitted; this will let you pick the step
  interactively if you don't know the exact name.

  Resource checking containers can also be intercepted with \code{--check} or
  \code{-c}:

  \codeblock{bash}{
  $ fly -t example intercept --check some-pipeline/some-resource
  }

  A specific command can also be given, e.g. \code{fly intercept ps auxf} or
  \code{fly intercept htop}. This allows for patterns such as \code{watch fly
  intercept ps auxf}, which will continuously show the process tree of the
  current build's task, even as the "current build" changes.

  The working directory and any relevant environment variables (e.g. those
  having come from \reference{params}) used by the original process will also
  be used for the process run by intercept.
}

\section{\code{watch}\aux{: View logs of in-progress builds}}{fly-watch}{
  Concourse emits streaming colored logs on the website but it can be helpful
  to have the logs availiable to the command line. (e.g. so that they can be
  processed by other commands).

  The \code{watch} command can be used to do just this. You can also view
  builds that are running in your pipeline, or builds that have already
  finished.

  Note that unlike \reference{fly-execute}, killing \code{fly watch} via
  \code{SIGINT} or \code{SIGTERM} will \italic{not} abort the build.

  To watch the most recent one-off build, just run \code{fly watch} with no
  arguments. To watch a specific build (one-off or no), pass \code{--build}
  with the ID of the build to watch. This ID is available at the start of
  \reference{fly-execute}'s output or by browsing to the builds list in the web
  UI.

  By using the \code{--job} and \code{--build} flags you can pick out a
  specific build of a job to watch. For example, the following command will
  either show the archived logs for an old build if it has finished running or
  it will stream the current logs if the build is still in progress.

  \codeblock{bash}{
  $ fly -t example watch --job my-pipeline/tests --build 52
  }

  If the \code{--job} flag is specified and \code{--build} is omitted, the most
  recent build of the specified job will be selected.
}

\section{\code{workers}\aux{: Listing registered workers}}{fly-workers}{
  To list the currently registered workers, including additional metadata, run:

  \codeblock{bash}{
  $ fly -t example workers
  }

  This can be useful for monitoring the status of your workers, if you suspect
  that one keeps dropping out of the pool or getting tasked with too many
  containers, etc.
}

\section{\code{volumes}\aux{: Listing active volumes}}{fly-volumes}{
  To list the active volumes across all your workers, run:

  \codeblock{bash}{
  $ fly -t example volumes
  }

  This can be useful to observe the caches warming across your cluster, and
  could be a good indicator of disk use.
}

\section{\code{checklist}\aux{: Generate Checkman definition files}}{fly-checklist}{
  \hyperlink{https://github.com/cppforlife/checkman}{Checkman} supports
  retrieving build status from Concourse. If you would like to set this up
  yourself then there is documentation in the
  \hyperlink{https://github.com/cppforlife/checkman#included-check-scripts}{Checkman
  README} about the syntax required. However, \code{fly} can generate the
  Checkman files based on your pipelines using the command below.

  \codeblock{bash}{
  $ fly -t example checklist --pipeline my-pipeline > ~/Checkman/my-pipeline
  }
}
