#language anatomy

\use{\load{concourse/docs}}

\template{\load{concourse/docs-template}}

\title{Flight School}{flight-school}

\omit-children-from-table-of-contents

Welcome, Cadet.

This walkthrough assumes you've already got a Concourse set up and ready to go.
If you don't, the most important thing is that you don't panic and go through
the \reference{installing}{installation guide} before coming back here.

\section{Getting Set Up}{
  First, let's get you a copy of your training materials.

  Fork \hyperlink{https://github.com/concourse/flight-school}{this repository}
  on GitHub into your own account. This will give you somewhere to keep your
  work.

  Next, clone your fork down to your local machine by running this command:

  \codeblock{bash}{
  $ git clone https://github.com/(your username)/flight-school
  }

  This is a simple \hyperlink{https://www.ruby-lang.org}{Ruby} project that will
  let you get a feel for flying. Let's check everything is working by running
  the tests locally.

  \codeblock{bash}{
  $ cd flight-school
  $ bundle install
  $ bundle exec rspec
  }

  If everything is working then you should see a few green dots on the screen to
  let you know that the tests are passing. If something failed then make sure to
  fix it and get the tests green before continuing. For example, if you're
  missing the \code{bundle} executable then you'll need to run
  \code{gem install bundler}.
}

\section{First Steps}{
  Ok, we've got a project. We want a pipeline. It's important to build a
  pipeline up gradually rather than attempting to do the whole thing at once.
  Let's start at the start by running those unit tests we just ran in Concourse.

  Download \code{fly} from your Concourse. You can find a download link on your
  Concourse installation main page. They will either be at the bottom right or
  in the middle if you don't have any pipelines yet.

  \codeblock{bash}{
  $ mkdir -p $HOME/bin
  $ install $HOME/Downloads/fly $HOME/bin
  }

  Make sure that \code{$HOME/bin} is
  \hyperlink{http://www.troubleshooters.com/linux/prepostpath.htm}{in your
  path}.

  You should now be able to run \code{fly --help} to see if everything is
  working.

  Ok, let's target and log in to our Concourse.

  \codeblock{bash}{
  $ fly -t ci login -c (your concourse URL)
  }

  The \code{-t} flag is the name we'll use to refer to this instance in the
  future. The \code{-c} flag is the concourse URL that we'd like to target.

  Depending on the authentication setup of your Concourse it may prompt you for
  various credentials to prove you are who you say you are.

  Right, let's try running the current project in Concourse.

  \codeblock{bash}{
  $ fly -t ci execute
  error: the required flag '-c, --config' was not specified
  }

  Huh. Well then, let's give it that flag with a file that it wants.

  \codeblock{bash}{
  $ fly -t ci execute -c build.yml
  error: invalid argument for flag '-c, --config' (expected flaghelpers.PathFlag): path 'build.yml' does not exist
  }

  Alright, so we need a file called \code{build.yml}.

  \codeblock{bash}{
  $ touch build.yml
  $ fly -t ci execute -c build.yml
  error: invalid task configuration:
    missing 'platform'
    missing path to executable to run
  }

  Surprise, surprise - looks like we can't just give it an empty file. We need
  to write a task definition. A task definition describes a unit of work to
  Concourse so that it can execute it.

  \codeblock{yaml}{
  platform: linux

  image_resource:
    type: docker-image
    source: { repository: busybox }

  inputs:
  - name: flight-school

  run:
    path: ./flight-school/ci/test.sh
  }

  Let's go through this line by line. The \code{platform:} simply states that we
  would like this task to run on a Linux worker. The \code{inputs:} section
  defines a set of things that we need in order for our task to run. In this
  case, we need the \code{flight-school} source code in order to run the tests
  on it. The final \code{run:} section describes how Concourse should run the
  task. By default Concourse will run your script with a current working
  directory containing all of your inputs as subdirectories.

  Ok, let's save that in \code{build.yml} and run our command again.

  \codeblock{bash}{
  $ fly -t ci execute -c build.yml
  executing build 107401
    % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                   Dload  Upload   Total   Spent    Left  Speed
  100 40960    0 40960    0     0   662k      0 --:--:-- --:--:-- --:--:--  800k
  initializing
  running flight-school/ci/test.sh
  exec failed: exec: "./flight-school/ci/test.sh": stat ./flight-school/ci/test.sh: no such file or directory
  failed
  }

  Ok, so what happened here. We started a build, uploaded the
  \code{flight-school} input, and then tried to run the
  \code{flight-school/ci/test.sh} script. Which isn't there. Oops! Let's write
  that.

  \codeblock{bash}{
  #!/bin/bash

  set -e -x

  pushd flight-school
    bundle install
    bundle exec rspec
  popd
  }

  This is basically the same commands we ran above in order to run the tests
  locally. The new bits at the start set up a few things. The \code{#!/bin/bash}
  is a \hyperlink{https://en.wikipedia.org/wiki/Shebang_(Unix)}{shebang line}
  that tells the operating system that when we execute this file we should run
  is using the \code{/bin/bash} interpreter. The \code{set -e -x} line is
  setting a few \code{bash} options. Namely, \code{-e} make it so the entire
  script fails if a single command fails (which is generally desirable in CI).
  By default, a script will keep executing if something fails. The \code{-x}
  means that each command should be printed as it's run (also desirable in CI).

  Let's give this new script a whirl.

  \codeblock{bash}{
  $ fly -t ci execute -c build.yml
  executing build 107401
    % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                   Dload  Upload   Total   Spent    Left  Speed
  100 40960    0 40960    0     0   662k      0 --:--:-- --:--:-- --:--:--  800k
  initializing
  running flight-school/ci/test.sh
  exec failed: exec: "./flight-school/ci/test.sh": permission denied
  failed
  }

  This error message means that the script we told it to run is not executable.
  Let's fix that.

  \codeblock{bash}{
  $ chmod +x ci/test.sh
  }

  Running again gives us:

  \codeblock{bash}{
  $ fly -t ci execute -c build.yml
  executing build 107401
    % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                   Dload  Upload   Total   Spent    Left  Speed
  100 40960    0 40960    0     0   662k      0 --:--:-- --:--:-- --:--:--  800k
  initializing
  running flight-school/ci/test.sh
  exec failed: no such file or directory
  failed
  }

  This message is a little obscure. It's complaining that the shebang
  (\code{/bin/bash}) can't find the interpreter. By default, Concourse will run
  your build in a tiny, un-opinionated operating system image that doesn't
  contain \code{bash}. This isn't very useful for running builds so let's pick
  one that is.

  Docker maintains a collection of Docker images for common languages. Let's use
  the \code{ruby} image at version \code{2.3.0}. We can specify that the task
  should run with this image by putting the following block in our
  \code{build.yml}.

  \codeblock{yaml}{
  image_resource:
    type: docker-image
    source:
      repository: ruby
      tag: 2.3.0
  }

  Let's try running that.

  \codeblock{bash}{
  $ fly -t ci execute -c build.yml
  executing build 107418
    % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                   Dload  Upload   Total   Spent    Left  Speed
  100 40960    0 40960    0     0   7657      0 --:--:--  0:00:05 --:--:--  9884
  initializing
  Pulling ruby@sha256:7ee3b80a4cca2d0545ca8a1cec01a880279a141bc0eb9e35ef192edd27652a8b...
  sha256:7ee3b80a4cca2d0545ca8a1cec01a880279a141bc0eb9e35ef192edd27652a8b: Pulling from library/ruby
  7268d8f794c4: Pulling fs layer
  [... docker output ...]
  b3789cc88ffa: Pull complete
  Digest: sha256:7ee3b80a4cca2d0545ca8a1cec01a880279a141bc0eb9e35ef192edd27652a8b
  Status: Downloaded newer image for ruby@sha256:7ee3b80a4cca2d0545ca8a1cec01a880279a141bc0eb9e35ef192edd27652a8b

  Successfully pulled ruby@sha256:7ee3b80a4cca2d0545ca8a1cec01a880279a141bc0eb9e35ef192edd27652a8b.

  running flight-school/ci/test.sh
  + pushd flight-school
  /tmp/build/e55deab7/flight-school /tmp/build/e55deab7
  + bundle install
  Fetching gem metadata from https://rubygems.org/..........
  Fetching version metadata from https://rubygems.org/..
  Installing addressable 2.4.0
  Installing safe_yaml 1.0.4
  Installing diff-lcs 1.2.5
  Installing hashdiff 0.3.0
  Installing rack 1.6.4
  Installing rspec-support 3.4.1
  Installing tilt 2.0.2
  Using bundler 1.11.2
  Installing crack 0.4.3
  Installing rack-protection 1.5.3
  Installing rack-test 0.6.3
  Installing rspec-core 3.4.3
  Installing rspec-expectations 3.4.0
  Installing rspec-mocks 3.4.1
  Installing webmock 1.24.0
  Installing sinatra 1.4.7
  Installing rspec 3.4.0
  Bundle complete! 4 Gemfile dependencies, 17 gems now installed.
  Bundled gems are installed into /usr/local/bundle.
  + bundle exec rspec
  Run options: include {:focus=>true}

  All examples were filtered out; ignoring {:focus=>true}

  Randomized with seed 20539
  ........

  Finished in 0.39713 seconds (files took 0.20659 seconds to load)
  8 examples, 0 failures

  Randomized with seed 20539

  + popd
  /tmp/build/e55deab7
  succeeded
  }

  Woohoo! We've run our unit tests inside Concourse. Now is a good time to
  commit and push.

  In general, try and think in terms of small reusable tasks that perform a
  simple action with the inputs that they're given. If a task ends up having too
  many inputs then it may be a smell that your task is doing too much. Similar
  to if a function in a program you were writing had a lot of parameters. In
  fact, that's a good way to think about tasks: they're functions that take
  inputs as parameters. Keeping them small and simple allows you to easily run
  them from your local machine as above.

  Please excuse the long-winded iterative process we used to get to the final
  result. You'll end up writing enough tasks that you can skip directly to the
  end. We felt it was important to go through all the possible hurdles you may
  encounter on your journey.
}

\section{Starting a Pipeline}{
  Ok, so. We have a task we can run. How about we run that every time the code
  changes so that we can check to see when anything breaks. Enter: pipelines.

  Pipelines are built up from resources and jobs. Resources are external,
  versioned things such as Git repositories or S3 buckets and jobs are a
  grouping of resources and tasks that actually do the work in the system.

  \codeblock{yaml}{
  resources:
  - name: flight-school
    type: git
    source:
      uri: https://github.com/(your username)/flight-school
      branch: master

  jobs:
  - name: test-app
    plan:
    - get: flight-school
    - task: tests
      file: flight-school/build.yml
  }

  Uploading that:

  \codeblock{bash}{
  fly -t ci set-pipeline -p flight-school -c ci/pipeline.yml
  ...
  pipeline created!
  you can view your pipeline here: https://(your concourse url)/pipelines/flight-school

  the pipeline is currently paused. to unpause, either:
    - run the unpause-pipeline command
    - click play next to the pipeline in the web ui
  }

  Follow the instructions to unpause the pipeline.

  Click the job. Then click run.

  It runs!

  \section{Running Continuously}{
    Add \code{trigger: true} to the \code{get}. Any new versions will trigger the
    job.

    \codeblock{yaml}{
    jobs:
    - name: test-app
      plan:
      - get: flight-school
        trigger: true
      - task: tests
        file: flight-school/build.yml
    }

    Try pushing a commit to the repository. For extra credit push a commit that
    breaks the build and then another one that fixes it again.
  }
}

\section{Extending the Pipeline}{
  What you've seen so far is the very essence of the way pipelines work in
  Concourse: a new version of a resource appears and then a job runs to do
  something with that new version. This is the very start of a pipeline. Let's
  keep adding to it and have it do more things for us.

  \section{Deploying your Application}{
    We've shown ourselves that we have a working application. Let's show the
    rest of the world by deploying the application to a PaaS (Platform as a
    Service).

    The author of this walkthrough is most familiar with
    \hyperlink{https://run.pivotal.io/}{Pivotal Web Services} (PWS). So that's
    what this guide is going to use. Feel free to use whichever deployment
    environment you'd like to use (such as Heroku, etc.). The mechanics and
    placement in the pipeline will be similar for all of them.

    Follow \hyperlink{https://docs.run.pivotal.io/starting/}{this guide} to get
    yourself set up with a PWS account and push some sample applications.
    There's a 60 day free trial so don't worry about this costing you anything.

    Now, that you're familiar with how to deploy an application to PWS, let's
    have the pipeline do all the hard work for us. First, let's add a resource
    for the pipeline to interact with.

    \codeblock{yaml}{
    - name: staging-app
      type: cf
      source:
        api: https://api.run.pivotal.io
        username: ((your cf username))
        password: ((your cf password))
        organization: ((your cf organization))
        space: ((your cf space))
    }

    Then, in our job, we can push our application.

    \codeblock{yaml}{
    - name: test-app
      plan:
      - get: flight-school
        trigger: true
      - task: tests
        file: flight-school/build.yml
      - put: staging-app
        params:
          manifest: flight-school/manifest.yml
    }

    Now, if we run the job again we'll see that after the tests have passed that
    Concourse deploys our application for the world to see. Try pushing some
    commits to the repository and seeing that they are automatically tested and
    pushed. (For example, try adding or removing a U.S. airport code from the
    list).
  }

  {-
  \section{Delivering Tracker Stories (Optional)}{
    As an optional aside let's try out marking stories as delivered in Pivotal
    Tracker. If you don't have a Tracker account and aren't interested in getting
    one then feel free to skip this section.
  }
  -}
}

\section{Adding and Integrating Second Component}{
  Coming soon!
}

{-
  A single component pipeline is interesting but it's nothing to write home
  about. Let's spice it up a little by adding a second component to the mix.

  Our application has a small API that lets a user get the status of an airport
  in JSON format. Let's try it out now.

  \codeblock{bash}{
  $ cd flight-school
  $ bundle exec rackup
  }

  And then in a different window:

  \codeblock{bash}{
  $ curl http://localhost:9292/api/airports/JFK
  \{"code":"JFK","name":"John F Kennedy International","city":"New York","weather":"Overcast"\}
  }

  Great! This isn't very user friendly though. What if there was a nifty little
  CLI that would show this information to the user in a human-friendly way?

  Please fork \hyperlink{https://github.com/concourse/flight-school-cli}{this
  second repository} into your own GitHub account. This is just the CLI that
  we've been looking for. We can check all of the tests are passing by running:

  \codeblock{bash}{
  $ cd flight-school-cli
  $ fly -t ci execute -c ci/unit/yml -x
  TODO: output here
  }

  Ok, let's add this to the pipeline.

  \codeblock{yaml}{
  TODO: Add pipeline snippet.
  }

  Great, we're now testing both components independently. What more could we ask
  for?
}

\section{Integrating the Two Components Together}{
  Oh, yeah, that whole integration thing that we're trying to do continuously.
  It's fine for these components to work independently but we really care that
  they work together. Let's add a job that checks this. Luckily, there's a task
  definition for checking this in the CLI repository under
  \code{ci/integration.yml}.

  Here's the job we'd like to add to our pipeline:

  \codeblock{yaml}{
  TODO: add job
  }

  Now, we don't really want to push the application to staging unless it works
  with the current CLI.

  Let's switch our current flow of pushing to staging after the unit tests for
  the application pass to when the integration tests for both components pass.

  \codeblock{yaml}{
  TODO: yaml
  }

  Bam. Integration.
}

\section{Distributing the CLI}{
  Ok, people can get to the application already but how can they get a CLI binary
  that they can use?
}
-}

\section{Next Steps}{
  By now you have a good grasp on the practical side of using Concourse. For a
  more in-depth explanation of how things work you should read the two documents
  on the \reference{pipeline-mechanics} and \reference{task-anatomy}.

  The rest of the documentation on the site provides reference material for
  Concourse. If you'd like to find out more about what attributes you can attach
  to a step in a plan or all the options that you can pass to \code{fly} then
  the links on the left hand side are the best place to start.

  And, as always, if you can't find what you're looking for in the documentation
  then we're around on \reference{slack-blurb}{Slack} during work hours and
  should be able to help you if you have further questions.
}
