#language anatomy

\use{\require{concourse/docs}}

\title{Restricting Access}{authentication}

Continuous Integration servers often contain a considerable number of secrets
to let them access source code and deploy applications. It is important that
those secrets remain well guarded. Concourse provides options for both
authentication and authorization to give you control over who can access your
server and how much they can see.

If you access your Concourse server over the public internet then all of the
options below are useless without using TLS to secure your connection.

\section{Logging In}{
  \section{Basic Authentication}{
    HTTP Basic authentication is the simplest of the authentication mechanisms.
    It has good support in both browsers and command line tools. It provides a
    single set of credentials for all users of the system.

    You can enable HTTP Basic authentication by setting the
    \code{atc.basic_auth_username} and \code{atc.basic_auth_password}
    properties (or their corresponding flags if you're not using BOSH,
    \code{--basic-auth-username} and \code{--basic-auth-password}). If you're
    using the \code{tsa} component too then make sure that you update its
    properties to allow it to talk to the \code{atc} too.
  }

  \section{OAuth}{
    \section{GitHub}{
      A Concourse server can authenticate against GitHub to take advantage of
      their permission model and other security improvements in their
      infrastructure. There are a number of steps you need to take to enable
      this.

      \ordered-list{
        First you need to
        \hyperlink{https://github.com/settings/applications/new}{create an OAuth
        application on GitHub}.

        The name, home page, and description don't
        matter but should be set to something that lets users trust their
        origin. The \italic{Authorization callback URL} should be the external
        URL of your Concourse server with \code{/auth/github/callback} appended.
        e.g. For Concourse's own CI server this would be
        \code{https://ci.concourse.ci/auth/github/callback}.
      }{
        You will be given a Client ID and a Client Secret for your new
        application. You need to pass these to Concourse
        (\code{atc.github_auth.client_id}, \code{atc.github_auth.client_secret}
        or appropriate command line flags) along with setting the external URL
        of the Concourse server (\code{atc.external_url} or command line flag).
      }{
        You're now able to set the organizations, teams, and individual users
        who should have access to your server.

        In BOSH you would set the \code{atc.github_auth.authorize} property with
        something like the following:

        \codeblock{yaml}{
          - organization: org1
            teams: all
          - organization: org2
            teams: [team1, team2]
          - user: user1
          - user: user2
        }

        This allows any member of \code{org1}, members of \code{team1} or
        \code{team2} from \code{org2}, or users \code{user1} or \code{user2} to
        authenticate with the server.

        To do the same without BOSH you would provide the equivalent
        \code{--github-auth-organization=ORG},
        \code{--github-auth-team=ORG/TEAM}, and \code{--github-auth-user=LOGIN}
        multiple times to achieve the same effect.

        When authenticated against a Github Enterprise use the following settings
        to override the URL's used for authentication:
        \code{--github-auth-auth-url=https://github.example.com/login/oauth/authorize},
        \code{--github-auth-token-url=https://github.example.com/login/oauth/access_token},
        \code{--github-auth-api-url=https://github.example.com/api/v3/}. Make sure the API URL ends with a slash!
      }
    }

    \section{Future Providers}{
      An integration with a Cloud Foundry deployment and the UAA backing it will
      probably be next.

      We've written the authentication layer of Concourse to be easily
      extendable. Adding a new OAuth provider is as simple as adding a few
      interface implementations and feeding them any information they need from
      the command line.

      We'd be interested in hearing about any providers with which you'd like to
      integrate.
    }
  }

  Any number of the above providers can be enabled at any one time. Users will
  be given a choice when logging in as to which one they would like to use.
}

\section{Permissions}{
  \section{Publicly Viewable}{
    If you enable \code{atc.publicly_viewable} (or the flag
    \code{--publicly-viewable}) then unauthenticated users are able to see a
    safe, read-only view of your Concourse server. They are able to see the main
    pipeline overviews, the list of pipelines, the status of builds, and
    resource information. They are not able to see build output.

    This feature is useful if you're using Concourse for an open source project
    and you'd like your community to be able to see into your build pipeline.
  }

  \section{Public Builds}{
    If you have builds that you \italic{do} want unauthenticated users to be
    able to see the build logs of a job then you can set \code{public: true} on
    a job in your pipeline definition. This will always default to \code{false}
    and require you to opt-in to making the potentially sensitive output public.
    If you have a build that contains no secrets then consider letting people
    see your build logs.
  }
}

\section{Development Mode}{
  To disable all authentication and authorization the \code{--development-mode}
  flag can be passed to \code{atc}. This is useful when developing Concourse
  locally or when using Concourse as a simple build worker locally. It should
  never be used in production!
}
