// Code generated by counterfeiter. DO NOT EDIT.
package tsafakes

import (
	"sync"

	"github.com/concourse/concourse/v5/tsa"
)

type FakeTokenGenerator struct {
	GenerateSystemTokenStub        func() (string, error)
	generateSystemTokenMutex       sync.RWMutex
	generateSystemTokenArgsForCall []struct {
	}
	generateSystemTokenReturns struct {
		result1 string
		result2 error
	}
	generateSystemTokenReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GenerateTeamTokenStub        func(string) (string, error)
	generateTeamTokenMutex       sync.RWMutex
	generateTeamTokenArgsForCall []struct {
		arg1 string
	}
	generateTeamTokenReturns struct {
		result1 string
		result2 error
	}
	generateTeamTokenReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTokenGenerator) GenerateSystemToken() (string, error) {
	fake.generateSystemTokenMutex.Lock()
	ret, specificReturn := fake.generateSystemTokenReturnsOnCall[len(fake.generateSystemTokenArgsForCall)]
	fake.generateSystemTokenArgsForCall = append(fake.generateSystemTokenArgsForCall, struct {
	}{})
	fake.recordInvocation("GenerateSystemToken", []interface{}{})
	fake.generateSystemTokenMutex.Unlock()
	if fake.GenerateSystemTokenStub != nil {
		return fake.GenerateSystemTokenStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.generateSystemTokenReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTokenGenerator) GenerateSystemTokenCallCount() int {
	fake.generateSystemTokenMutex.RLock()
	defer fake.generateSystemTokenMutex.RUnlock()
	return len(fake.generateSystemTokenArgsForCall)
}

func (fake *FakeTokenGenerator) GenerateSystemTokenCalls(stub func() (string, error)) {
	fake.generateSystemTokenMutex.Lock()
	defer fake.generateSystemTokenMutex.Unlock()
	fake.GenerateSystemTokenStub = stub
}

func (fake *FakeTokenGenerator) GenerateSystemTokenReturns(result1 string, result2 error) {
	fake.generateSystemTokenMutex.Lock()
	defer fake.generateSystemTokenMutex.Unlock()
	fake.GenerateSystemTokenStub = nil
	fake.generateSystemTokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenGenerator) GenerateSystemTokenReturnsOnCall(i int, result1 string, result2 error) {
	fake.generateSystemTokenMutex.Lock()
	defer fake.generateSystemTokenMutex.Unlock()
	fake.GenerateSystemTokenStub = nil
	if fake.generateSystemTokenReturnsOnCall == nil {
		fake.generateSystemTokenReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generateSystemTokenReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenGenerator) GenerateTeamToken(arg1 string) (string, error) {
	fake.generateTeamTokenMutex.Lock()
	ret, specificReturn := fake.generateTeamTokenReturnsOnCall[len(fake.generateTeamTokenArgsForCall)]
	fake.generateTeamTokenArgsForCall = append(fake.generateTeamTokenArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GenerateTeamToken", []interface{}{arg1})
	fake.generateTeamTokenMutex.Unlock()
	if fake.GenerateTeamTokenStub != nil {
		return fake.GenerateTeamTokenStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.generateTeamTokenReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTokenGenerator) GenerateTeamTokenCallCount() int {
	fake.generateTeamTokenMutex.RLock()
	defer fake.generateTeamTokenMutex.RUnlock()
	return len(fake.generateTeamTokenArgsForCall)
}

func (fake *FakeTokenGenerator) GenerateTeamTokenCalls(stub func(string) (string, error)) {
	fake.generateTeamTokenMutex.Lock()
	defer fake.generateTeamTokenMutex.Unlock()
	fake.GenerateTeamTokenStub = stub
}

func (fake *FakeTokenGenerator) GenerateTeamTokenArgsForCall(i int) string {
	fake.generateTeamTokenMutex.RLock()
	defer fake.generateTeamTokenMutex.RUnlock()
	argsForCall := fake.generateTeamTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTokenGenerator) GenerateTeamTokenReturns(result1 string, result2 error) {
	fake.generateTeamTokenMutex.Lock()
	defer fake.generateTeamTokenMutex.Unlock()
	fake.GenerateTeamTokenStub = nil
	fake.generateTeamTokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenGenerator) GenerateTeamTokenReturnsOnCall(i int, result1 string, result2 error) {
	fake.generateTeamTokenMutex.Lock()
	defer fake.generateTeamTokenMutex.Unlock()
	fake.GenerateTeamTokenStub = nil
	if fake.generateTeamTokenReturnsOnCall == nil {
		fake.generateTeamTokenReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generateTeamTokenReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateSystemTokenMutex.RLock()
	defer fake.generateSystemTokenMutex.RUnlock()
	fake.generateTeamTokenMutex.RLock()
	defer fake.generateTeamTokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTokenGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ tsa.TokenGenerator = new(FakeTokenGenerator)
