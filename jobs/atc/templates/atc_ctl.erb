#!/bin/bash
# vim: set ft=sh

set -e

<%
  require "shellwords"

  def esc(x)
    Shellwords.shellescape(x)
  end
%>

RUN_DIR=/var/vcap/sys/run/atc
LOG_DIR=/var/vcap/sys/log/atc
SIGNING_KEY=/var/vcap/jobs/atc/config/token_signing_key
PIDFILE=$RUN_DIR/atc.pid
CF_CA_CERT=/var/vcap/jobs/atc/config/cf_ca_cert
GITHUB_CA_CERT=/var/vcap/jobs/atc/config/github_ca_cert
OAUTH_CA_CERT=/var/vcap/jobs/atc/config/oauth_ca_cert
OIDC_CA_CERT=/var/vcap/jobs/atc/config/oidc_ca_cert
POSTGRESQL_CA_CERT=/var/vcap/jobs/atc/config/postgres_ca_cert
POSTGRESQL_CLIENT_CERT=/var/vcap/jobs/atc/config/postgres_client_cert
POSTGRESQL_CLIENT_KEY=/var/vcap/jobs/atc/config/postgres_client_key

source /var/vcap/packages/pid_utils/pid_utils.sh

<%
  postgres_host = ""
  postgres_port = ""
  postgres_role_name = ""
  postgres_role_password = ""
  postgres_database = ""
  postgres_sslmode = p("postgresql.sslmode", "verify-ca")

  if_p("postgresql.address") do |addr|
    postgres_host, postgres_port = addr.split(":")
  end

  postgres_host = p("postgresql.host", "")
  postgres_port = p("postgresql.port")
  postgres_database = p("postgresql.database")
  postgres_role_name = p("postgresql.role.name")
  postgres_role_password = p("postgresql.role.password", "")

  if_link("db") do |db|
    postgres_host = db.instances.first.address
    postgres_port = db.p("bind_port")
    postgres_database = p("postgresql_database")

    postgres_db = db.p("databases").find { |db| db["name"] == postgres_database }
    if postgres_db.nil?
      raise "database '#{db_name}' not provided by 'postgresql' link"
    end

    postgres_role_name = postgres_db["role"]
    postgres_role_password = postgres_db["password"]
  end if postgres_host.empty?

  if_link("postgres") do |l|
    postgres_host = l.instances.first.address
  end if postgres_host.empty?

  if postgres_host.empty?
    raise "postgres.host not set and no 'db' or 'postgres' link available"
  end

  postgres_sslmode = p("postgresql.sslmode", "disable")
%>

case $1 in

  start)
    pid_guard $PIDFILE "atc"

    mkdir -p $RUN_DIR
    chown -R vcap:vcap $RUN_DIR

    mkdir -p $LOG_DIR
    chown -R vcap:vcap $LOG_DIR

    echo $$ > /var/vcap/sys/run/atc/atc.pid

    chown vcap:vcap $SIGNING_KEY
    chmod 0400 $SIGNING_KEY

    chown vcap:vcap $CF_CA_CERT
    chmod 0400 $CF_CA_CERT

    chown vcap:vcap $GITHUB_CA_CERT
    chmod 0400 $GITHUB_CA_CERT

    chown vcap:vcap $OAUTH_CA_CERT
    chmod 0400 $OAUTH_CA_CERT

    chown vcap:vcap $OIDC_CA_CERT
    chmod 0400 $OIDC_CA_CERT

    chown vcap:vcap $POSTGRESQL_CA_CERT
    chmod 0400 $POSTGRESQL_CA_CERT

    chown vcap:vcap $POSTGRESQL_CLIENT_CERT
    chmod 0400 $POSTGRESQL_CLIENT_CERT

    chown vcap:vcap $POSTGRESQL_CLIENT_KEY
    chmod 0400 $POSTGRESQL_CLIENT_KEY

    setcap cap_net_bind_service=+ep /var/vcap/packages/atc/bin/atc

    exec chpst -u vcap:vcap /var/vcap/packages/atc/bin/atc run \
      --bind-ip <%= p("bind_ip") %> \
      --bind-port <%= p("bind_port") %> \
      <% if p("cookie_secure") %> \
      --cookie-secure \
      <% end %> \
      <% if_p("tls_bind_port", "tls_cert", "tls_key") do |port, _, _| %> \
      --tls-bind-port <%= port %> \
      --tls-cert /var/vcap/jobs/atc/config/tls_cert \
      --tls-key /var/vcap/jobs/atc/config/tls_key \
      <% end %> \
      --peer-url <%= esc(p("peer_url", "http://#{spec.address}:#{p("bind_port")}")) %> \
      --external-url <%= esc(p("external_url", "http://#{spec.address}:#{p("bind_port")}")) %> \
      --postgres-host <%= esc(postgres_host) %> \
      --postgres-port <%= esc(postgres_port) %> \
      --postgres-database <%= esc(postgres_database) %> \
      --postgres-sslmode <%= esc(postgres_sslmode) %> \
      --postgres-user <%= esc(postgres_role_name) %> \
      --postgres-password <%= esc(postgres_role_password) %> \
      <% if_p("postgresql.ca_cert") do |_| %> \
      --postgres-ca-cert $POSTGRESQL_CA_CERT \
      <% end %> \
      <% if_p("postgresql.client_cert", "postgresql.client_key") do |*_| %> \
      --postgres-client-cert $POSTGRESQL_CLIENT_CERT \
      --postgres-client-key $POSTGRESQL_CLIENT_KEY \
      <% end %> \
      --postgres-connect-timeout <%= p("postgresql.connect_timeout") %> \
      <% if_p("encryption_key") do |key| %> \
      --encryption-key <%= esc(key) %> \
      <% end %> \
      <% if_p("old_encryption_key") do |key| %> \
      --old-encryption-key <%= esc(key) %> \
      <% end %> \
      --log-level <%= p("log_level") %> \
      <% if p("log_db_queries") %> \
      --log-db-queries \
      <% end %> \
      <% p("add_local_users").each do |v| %> \
      --add-local-user <%= esc(v.keys[0]) + ":" + esc(v.values[0]) %> \
      <% end %> \
      --auth-duration <%= p("auth_duration") %> \
      --github-client-id <%= esc(p("github_auth.client_id")) %> \
      --github-client-secret <%= esc(p("github_auth.client_secret")) %> \
      --github-host <%= esc(p("github_auth.host")) %> \
      <% if_p("github_auth.ca_cert") do |_| %> \
      --github-ca-cert $GITHUB_CA_CERT \
      <% end %> \
      --cf-client-id <%= esc(p("cf_auth.client_id")) %> \
      --cf-client-secret <%= esc(p("cf_auth.client_secret")) %> \
      --cf-api-url <%= esc(p("cf_auth.api_url")) %> \
      <% if_p("cf_auth.ca_cert") do |_| %> \
      --cf-ca-cert $CF_CA_CERT \
      <% end %> \
      --oauth-client-id <%= esc(p("generic_oauth.client_id")) %> \
      --oauth-client-secret <%= esc(p("generic_oauth.client_secret")) %> \
      --oauth-auth-url <%= esc(p("generic_oauth.auth_url")) %> \
      --oauth-token-url <%= esc(p("generic_oauth.token_url")) %> \
      --oauth-userinfo-url <%= esc(p("generic_oauth.userinfo_url")) %> \
      <% p("generic_oauth.scopes").each do |v| %> \
      --oauth-scope <%= esc(v) %> \
      <% end %> \
      --oauth-groups-key <%= esc(p("generic_oauth.groups_key")) %> \
      <% if_p("generic_oauth.ca_cert") do |_| %> \
      --oauth-ca-cert $OAUTH_CA_CERT \
      <% end %> \
      --oidc-client-id <%= esc(p("generic_oidc.client_id")) %> \
      --oidc-client-secret <%= esc(p("generic_oidc.client_secret")) %> \
      --oidc-issuer <%= esc(p("generic_oidc.issuer")) %> \
      <% p("generic_oidc.scopes").each do |v| %> \
      --oidc-scope <%= esc(v) %> \
      <% end %> \
      --oidc-groups-key <%= esc(p("generic_oidc.groups_key")) %> \
      <% if_p("generic_oidc.ca_cert") do |_| %> \
      --oidc-ca-cert $OIDC_CA_CERT \
      <% end %> \
      <% if p("main_team.auth.allow_all_users") %> \
      --main-team-allow-all-users \
      <% end %> \
      <% p("main_team.auth.local.users").each do |v| %> \
        --main-team-local-user <%= esc(v) %>\
      <% end %> \
      <% p("main_team.auth.github.users").each do |v| %> \
        --main-team-github-user <%= esc(v) %>\
      <% end %> \
      <% p("main_team.auth.github.orgs").each do |v| %> \
        --main-team-github-org <%= esc(v) %> \
      <% end %> \
      <% p("main_team.auth.github.teams").each do |v| %> \
        --main-team-github-team <%= esc(v) %> \
      <% end %> \
      <% p("main_team.auth.cf.users").each do |v| %> \
      --main-team-cf-user <%= esc(v) %> \
      <% end %> \
      <% p("main_team.auth.cf.orgs").each do |v| %> \
      --main-team-cf-org <%= esc(v) %> \
      <% end %> \
      <% p("main_team.auth.cf.spaces").each do |v| %> \
      --main-team-cf-space <%= esc(v) %> \
      <% end %> \
      <% p("main_team.auth.oauth.users").each do |v| %> \
      --main-team-oauth-user <%= esc(v) %> \
      <% end %> \
      <% p("main_team.auth.oauth.groups").each do |v| %> \
      --main-team-oauth-group <%= esc(v) %> \
      <% end %> \
      <% p("main_team.auth.oidc.users").each do |v| %> \
      --main-team-oidc-user <%= esc(v) %> \
      <% end %> \
      <% p("main_team.auth.oidc.groups").each do |v| %> \
      --main-team-oidc-group <%= esc(v) %> \
      <% end %> \
      --session-signing-key $SIGNING_KEY \
      <% if_p("intercept_idle_timeout") do |timeout| %> \
      --intercept-idle-timeout <%= esc(timeout) %> \
      <% end %> \
      --resource-checking-interval <%= p("default_check_interval") %> \
      --resource-type-checking-interval <%= p("default_resource_type_check_interval") %> \
      --container-placement-strategy <%= p("container_placement_strategy") %> \
      --gc-interval <%= p("gc_interval") %> \
      --build-tracker-interval <%= p("build_tracker_interval") %> \
      --baggageclaim-response-header-timeout <%= p("baggageclaim_response_header_timeout") %> \
      --cli-artifacts-dir /var/vcap/packages/fly \
      <% if_p("influxdb.url") do |url| %> \
      --influxdb-url <%= esc(url) %> \
      <% end %> \
      --influxdb-database <%= esc(p("influxdb.database")) %> \
      --influxdb-username <%= esc(p("influxdb.username")) %> \
      --influxdb-password <%= esc(p("influxdb.password")) %> \
      <% if p("influxdb.insecure_skip_verify") %> \
      --influxdb-insecure-skip-verify \
      <% end %> \
      <% if_p("datadog.agent_host", "datadog.agent_port") do |host, port| %> \
      --datadog-agent-host <%= esc(host) %> \
      --datadog-agent-port <%= port.to_i %> \
      <% end %> \
      <% if_p("datadog.prefix") do |prefix| %> \
      --datadog-prefix <%= esc(prefix) %> \
      <% end %> \
      <% if_p("riemann.host", "riemann.port") do |host, port| %> \
      --riemann-host <%= esc(host) %> \
      --riemann-port <%= port.to_i %> \
      <% end %> \
      <% if_p("riemann.service_prefix") do |prefix| %> \
      --riemann-service-prefix <%= esc(prefix) %> \
      <% end %> \
      --metrics-host-name <%= name %>-<%= index %> \
      --metrics-attribute <%= esc("bosh-deployment:#{spec.deployment}") %> \
      --metrics-attribute <%= esc("bosh-job:#{name}") %> \
      <% p("riemann.tags").each do |k,v| %> \
      --metrics-attribute <%= esc(k) %>:<%= esc(v) %> \
      <% end %> \
      <% if_p("prometheus.bind_ip", "prometheus.bind_port") do |ip, port| %> \
      --prometheus-bind-ip <%= esc(ip) %> \
      --prometheus-bind-port <%= esc(port) %> \
      <% end %> \
      --x-frame-options <%= esc(p("x_frame_options")) %> \
      <% if_p("credhub.url") do |url| %> \
      --credhub-url <%= esc(url) %> \
      <% if_p("credhub.tls.ca_cert") do |ca_cert| %> \
      --credhub-ca-cert /var/vcap/jobs/atc/config/credhub_ca_cert \
      <% end %> \
      <% if_p("credhub.tls.client_cert") do %> \
      --credhub-client-cert /var/vcap/jobs/atc/config/credhub_client_cert \
      --credhub-client-key /var/vcap/jobs/atc/config/credhub_client_key \
      <% end %> \
      <% if p("credhub.tls.insecure_skip_verify") %> \
      --credhub-insecure-skip-verify \
      <% end %> \
      <% if_p("credhub.client_id", "credhub.client_secret") do |id, secret| %> \
      --credhub-client-id <%= esc(id) %> \
      --credhub-client-secret <%= esc(secret) %> \
      <% end %> \
      --credhub-path-prefix <%= esc(p("credhub.path_prefix")) %> \
      <% end %> \
      <% if_p("vault.url") do |url| %> \
      --vault-url <%= esc(url) %> \
      <% if_p("vault.tls.ca_cert") do |ca_cert| %> \
      --vault-ca-cert /var/vcap/jobs/atc/config/vault_ca_cert \
      <% end %> \
      --vault-server-name <%= esc(p("vault.tls.server_name")) %> \
      <% if p("vault.tls.insecure_skip_verify") %> \
      --vault-insecure-skip-verify \
      <% end %> \
      <% if_p("vault.tls.client_cert") do %> \
      --vault-client-cert /var/vcap/jobs/atc/config/vault_client_cert \
      --vault-client-key /var/vcap/jobs/atc/config/vault_client_key \
      <% end %> \
      --vault-client-token <%= esc(p("vault.auth.client_token")) %> \
      --vault-auth-backend <%= esc(p("vault.auth.backend")) %> \
      <% p("vault.auth.params").each do |k, v| %> \
      --vault-auth-param <%= esc("#{k}=#{v.to_json}") %> \
      <% end %> \
      <% if_p("vault.path_prefix") do %> \
      --vault-path-prefix <%= esc(p("vault.path_prefix")) %> \
      <% end %> \
      <% end %> \
      <% if_p("aws_ssm.region") do |aws_region| %> \
      --aws-ssm-region <%= esc(aws_region) %> \
      <% end %> \
      <% if_p("aws_ssm.access_key") do |aws_access_key| %> \
      --aws-ssm-access-key <%= esc(aws_access_key) %> \
      <% end %> \
      <% if_p("aws_ssm.secret_key") do |aws_secret_key| %> \
      --aws-ssm-secret-key <%= esc(aws_secret_key) %> \
      <% end %> \
      <% if_p("aws_ssm.session_token") do |aws_session_token| %> \
      --aws-ssm-session-token <%= esc(aws_session_token) %> \
      <% end %> \
      <% if_p("aws_ssm.pipeline_secret_template") do |pipeline_secret_template| %> \
      --aws-ssm-pipeline-secret-template <%= esc(pipeline_secret_template) %> \
      <% end %> \
      <% if_p("aws_ssm.team_secret_template") do |team_secret_template| %> \
      --aws-ssm-team-secret-template <%= esc(team_secret_template) %> \
      <% end %> \
      <% if_p("aws_secretsmanager.region") do |aws_region| %> \
      --aws-secretsmanager-region <%= esc(aws_region) %> \
      <% end %> \
      <% if_p("aws_secretsmanager.access_key") do |aws_access_key| %> \
      --aws-secretsmanager-access-key <%= esc(aws_access_key) %> \
      <% end %> \
      <% if_p("aws_secretsmanager.secret_key") do |aws_secret_key| %> \
      --aws-secretsmanager-secret-key <%= esc(aws_secret_key) %> \
      <% end %> \
      <% if_p("aws_secretsmanager.session_token") do |aws_session_token| %> \
      --aws-secretsmanager-session-token <%= esc(aws_session_token) %> \
      <% end %> \
      <% if_p("aws_secretsmanager.pipeline_secret_template") do |pipeline_secret_template| %> \
      --aws-secretsmanager-pipeline-secret-template <%= esc(pipeline_secret_template) %> \
      <% end %> \
      <% if_p("aws_secretsmanager.team_secret_template") do |team_secret_template| %> \
      --aws-secretsmanager-team-secret-template <%= esc(team_secret_template) %> \
      <% end %> \
      <% if_p("build_log_retention.default") do |build_log_retention_default| %> \
      --default-build-logs-to-retain <%= esc(build_log_retention_default) %> \
      <% end %> \
      <% if_p("build_log_retention.maximum") do |build_log_retention_maximum| %> \
      --max-build-logs-to-retain <%= esc(build_log_retention_maximum) %> \
      <% end %> \
      <% if_p("default_task_cpu_limit") do |default_task_cpu_limit| %> \
      --default-task-cpu-limit <%= esc(default_task_cpu_limit) %> \
      <% end %> \
      <% if_p("default_task_memory_limit") do |default_task_memory_limit| %> \
      --default-task-memory-limit <%= esc(default_task_memory_limit) %> \
      <% end %> \
      1>>$LOG_DIR/atc.stdout.log \
      2>>$LOG_DIR/atc.stderr.log

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: $0 {start|stop}"

    ;;

esac
