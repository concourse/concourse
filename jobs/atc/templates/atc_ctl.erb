#!/bin/bash
# vim: set ft=sh

set -e

<%
  require "shellwords"

  def esc(x)
    Shellwords.shellescape(x)
  end
%>

RUN_DIR=/var/vcap/sys/run/atc
LOG_DIR=/var/vcap/sys/log/atc
SIGNING_KEY=/var/vcap/packages/generated_signing_key/id_rsa
PIDFILE=$RUN_DIR/atc.pid
CF_CA_CERT=/var/vcap/jobs/atc/config/cf_ca_cert
POSTGRESQL_CA_CERT=/var/vcap/jobs/atc/config/postgres_ca_cert
POSTGRESQL_CLIENT_CERT=/var/vcap/jobs/atc/config/postgres_client_cert
POSTGRESQL_CLIENT_KEY=/var/vcap/jobs/atc/config/postgres_client_key

source /var/vcap/packages/pid_utils/pid_utils.sh

<%
  postgres_host = ""
  postgres_port = ""
  postgres_role_name = ""
  postgres_role_password = ""
  postgres_database = ""
  postgres_sslmode = p("postgresql.sslmode", "verify-ca")

  if_p("postgresql.address") do |addr|
    postgres_host, postgres_port = addr.split(":")
  end

  if_p("postgresql.host", "postgresql.port", "postgresql.role.name", "postgresql.role.password", "postgresql.database") do |h, p, rn, rp, db|
    postgres_host = h
    postgres_port = p
    postgres_role_name = rn
    postgres_role_password = rp
    postgres_database = db
  end

  if postgres_host.empty?
    db = link("db")

    postgres_host = db.instances.first.address
    postgres_port = db.p("bind_port")
    postgres_database = p("postgresql_database")
    postgres_sslmode = p("postgresql.sslmode", "disable")

    postgres_db = db.p("databases").find { |db| db["name"] == postgres_database }
    if postgres_db.nil?
      raise "database '#{db_name}' not provided by 'postgresql' link"
    end

    postgres_role_name = postgres_db["role"]
    postgres_role_password = postgres_db["password"]
  end
%>

case $1 in

  start)
    pid_guard $PIDFILE "atc"

    mkdir -p $RUN_DIR
    chown -R vcap:vcap $RUN_DIR

    mkdir -p $LOG_DIR
    chown -R vcap:vcap $LOG_DIR

    echo $$ > /var/vcap/sys/run/atc/atc.pid

    chown vcap:vcap $SIGNING_KEY
    chmod 0400 $SIGNING_KEY

    chown vcap:vcap $CF_CA_CERT
    chmod 0400 $CF_CA_CERT

    chown vcap:vcap $POSTGRESQL_CA_CERT
    chmod 0400 $POSTGRESQL_CA_CERT

    chown vcap:vcap $POSTGRESQL_CLIENT_CERT
    chmod 0400 $POSTGRESQL_CLIENT_CERT

    chown vcap:vcap $POSTGRESQL_CLIENT_KEY
    chmod 0400 $POSTGRESQL_CLIENT_KEY

    setcap cap_net_bind_service=+ep /var/vcap/packages/atc/bin/atc

    exec chpst -u vcap:vcap /var/vcap/packages/atc/bin/atc \
      --bind-ip <%= p("bind_ip") %> \
      --bind-port <%= p("bind_port") %> \
      <% if_p("tls_bind_port", "tls_cert", "tls_key") do |port, _, _| %> \
      --tls-bind-port <%= port %> \
      --tls-cert /var/vcap/jobs/atc/config/tls_cert \
      --tls-key /var/vcap/jobs/atc/config/tls_key \
      <% end %> \
      --peer-url <%= esc(p("peer_url", "http://#{spec.address}:#{p("bind_port")}")) %> \
      --external-url <%= esc(p("external_url", "http://#{spec.address}:#{p("bind_port")}")) %> \
      --postgres-host <%= esc(postgres_host) %> \
      --postgres-port <%= esc(postgres_port) %> \
      --postgres-database <%= esc(postgres_database) %> \
      --postgres-sslmode <%= esc(postgres_sslmode) %> \
      --postgres-user <%= esc(postgres_role_name) %> \
      --postgres-password <%= esc(postgres_role_password) %> \
      <% if_p("postgresql.ca_cert") do |_| %> \
      --postgres-ca-cert $POSTGRESQL_CA_CERT \
      <% end %> \
      <% if_p("postgresql.client_cert", "postgresql.client_key") do |*_| %> \
      --postgres-client-cert $POSTGRESQL_CLIENT_CERT \
      --postgres-client-key $POSTGRESQL_CLIENT_KEY \
      <% end %> \
      --postgres-connect-timeout <%= p("postgresql.connect_timeout") %> \
      <% if_p("encryption_key") do |key| %> \
      --encryption-key <%= esc(key) %> \
      <% end %> \
      <% if_p("old_encryption_key") do |key| %> \
      --old-encryption-key <%= esc(key) %> \
      <% end %> \
      <% if p("no_really_i_dont_want_any_auth") %> \
      --no-really-i-dont-want-any-auth \
      <% end %> \
      --log-level <%= p("log_level") %> \
      <% if p("log_db_queries") %> \
      --log-db-queries \
      <% end %> \
      --basic-auth-username <%= esc(p("basic_auth_username")) %> \
      --basic-auth-password <%= esc(p("basic_auth_password")) %> \
      --auth-duration <%= p("auth_duration") %> \
      <% p("github_auth.authorize").each do |a| %> \
        <% if org = a["organization"] %> \
          <% if a["teams"] == "all" %> \
      --github-auth-organization <%= esc(org) %> \
          <% elsif a["teams"].respond_to?(:each) %> \
            <% a["teams"].each do |team| %> \
      --github-auth-team <%= esc("#{org}/#{team}") %> \
            <% end %> \
          <% elsif a["teams"].nil? %> \
            <% raise "teams for organization '#{org}' must be specified; use 'all' for all teams" %> \
          <% else %> \
            <% raise "invalid teams for organization '#{org}': '#{a["teams"].inspect}" %> \
          <% end %> \
        <% elsif user = a["user"] %> \
      --github-auth-user <%= esc(user) %> \
        <% else %> \
          <% raise "organization or user not specified" %> \
        <% end %> \
      <% end %> \
      --github-auth-client-id <%= esc(p("github_auth.client_id")) %> \
      --github-auth-client-secret <%= esc(p("github_auth.client_secret")) %> \
      <% if_p("github_auth.auth_url") do |url| %> \
      --github-auth-auth-url <%= esc(url) %> \
      <% end %> \
      <% if_p("github_auth.token_url") do |url| %> \
      --github-auth-token-url <%= esc(url) %> \
      <% end %> \
      <% if_p("github_auth.api_url") do |url| %> \
      --github-auth-api-url <%= esc(url) %> \
      <% end %> \
      --uaa-auth-client-id <%= esc(p("uaa_auth.client_id")) %> \
      --uaa-auth-client-secret <%= esc(p("uaa_auth.client_secret")) %> \
      --uaa-auth-auth-url <%= esc(p("uaa_auth.auth_url")) %> \
      --uaa-auth-token-url <%= esc(p("uaa_auth.token_url")) %> \
      <% p("uaa_auth.cf_spaces").each do |s| %> \
      --uaa-auth-cf-space <%= esc(s) %> \
      <% end %> \
      --uaa-auth-cf-url <%= esc(p("uaa_auth.cf_api_url")) %> \
      --uaa-auth-cf-ca-cert $CF_CA_CERT \
      --generic-oauth-client-id <%= esc(p("generic_oauth.client_id")) %> \
      --generic-oauth-client-secret <%= esc(p("generic_oauth.client_secret")) %> \
      --generic-oauth-auth-url <%= esc(p("generic_oauth.auth_url")) %> \
      <% p("generic_oauth.auth_url_params").each do |k, v| %> \
      --generic-oauth-auth-url-param <%= esc(k) %>:<%= esc(v) %> \
      <% end %> \
      <% if_p("generic_oauth.scope") do |s| %> \
      --generic-oauth-scope <%= esc(s) %> \
      <% end %> \
      --generic-oauth-token-url <%= esc(p("generic_oauth.token_url")) %> \
      --generic-oauth-display-name <%= esc(p("generic_oauth.display_name")) %> \
      --session-signing-key $SIGNING_KEY \
      --resource-checking-interval <%= p("default_check_interval") %> \
      --old-resource-grace-period <%= p("old_resource_grace_period") %> \
      --resource-cache-cleanup-interval <%= p("resource_cache_cleanup_interval") %> \
      --gc-interval <%= p("gc_interval") %> \
      --build-tracker-interval <%= p("build_tracker_interval") %> \
      --baggageclaim-response-header-timeout <%= p("baggageclaim_response_header_timeout") %> \
      --cli-artifacts-dir /var/vcap/packages/fly \
      --yeller-api-key <%= esc(p("yeller.api_key")) %> \
      --yeller-environment <%= esc(p("yeller.environment_name")) %> \
      <% if_p("influxdb.url") do |url| %> \
      --influxdb-url <%= esc(url) %> \
      <% end %> \
      --influxdb-database <%= esc(p("influxdb.database")) %> \
      --influxdb-username <%= esc(p("influxdb.username")) %> \
      --influxdb-password <%= esc(p("influxdb.password")) %> \
      <% if p("influxdb.insecure_skip_verify") %> \
      --influxdb-insecure-skip-verify \
      <% end %> \
      <% if_p("riemann.host", "riemann.port") do |host, port| %> \
      --riemann-host <%= esc(host) %> \
      --riemann-port <%= port.to_i %> \
      <% end %> \
      <% if_p("riemann.service_prefix") do |prefix| %> \
      --riemann-service-prefix <%= esc(prefix) %> \
      <% end %> \
      --metrics-host-name <%= name %>-<%= index %> \
      --metrics-attribute <%= esc("bosh-deployment:#{spec.deployment}") %> \
      --metrics-attribute <%= esc("bosh-job:#{name}") %> \
      <% p("riemann.tags").each do |k,v| %> \
      --metrics-attribute <%= esc(k) %>:<%= esc(v) %> \
      <% end %> \
      --x-frame-options <%= esc(p("x_frame_options")) %> \
      <% if_p("vault.url") do |url| %> \
      --vault-url <%= esc(url) %> \
      <% if_p("vault.tls.ca_cert") do |ca_cert| %> \
      --vault-ca-cert /var/vcap/jobs/atc/config/vault_ca_cert \
      <% end %> \
      --vault-server-name <%= esc(p("vault.tls.server_name")) %> \
      --vault-insecure-skip-verify <%= p("vault.tls.insecure_skip_verify") %> \
      <% if_p("vault.tls.client_cert") do %> \
      --vault-client-cert /var/vcap/jobs/atc/config/vault_client_cert \
      --vault-client-key /var/vcap/jobs/atc/config/vault_client_key \
      <% end %> \
      --vault-client-token <%= esc(p("vault.auth.client_token")) %> \
      --vault-auth-backend <%= esc(p("vault.auth.backend")) %> \
      <% p("vault.auth.params").each do |k, v| %> \
      --vault-auth-param <%= esc("#{k}=#{v.to_json}") %> \
      <% end %> \
      <% end %> \
      1>>$LOG_DIR/atc.stdout.log \
      2>>$LOG_DIR/atc.stderr.log

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: $0 {start|stop}"

    ;;

esac
