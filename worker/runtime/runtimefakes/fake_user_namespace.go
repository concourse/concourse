// Code generated by counterfeiter. DO NOT EDIT.
package runtimefakes

import (
	"sync"

	"github.com/concourse/concourse/worker/runtime"
)

type FakeUserNamespace struct {
	MaxValidIdsStub        func() (uint32, uint32, error)
	maxValidIdsMutex       sync.RWMutex
	maxValidIdsArgsForCall []struct {
	}
	maxValidIdsReturns struct {
		result1 uint32
		result2 uint32
		result3 error
	}
	maxValidIdsReturnsOnCall map[int]struct {
		result1 uint32
		result2 uint32
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserNamespace) MaxValidIds() (uint32, uint32, error) {
	fake.maxValidIdsMutex.Lock()
	ret, specificReturn := fake.maxValidIdsReturnsOnCall[len(fake.maxValidIdsArgsForCall)]
	fake.maxValidIdsArgsForCall = append(fake.maxValidIdsArgsForCall, struct {
	}{})
	stub := fake.MaxValidIdsStub
	fakeReturns := fake.maxValidIdsReturns
	fake.recordInvocation("MaxValidIds", []interface{}{})
	fake.maxValidIdsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeUserNamespace) MaxValidIdsCallCount() int {
	fake.maxValidIdsMutex.RLock()
	defer fake.maxValidIdsMutex.RUnlock()
	return len(fake.maxValidIdsArgsForCall)
}

func (fake *FakeUserNamespace) MaxValidIdsCalls(stub func() (uint32, uint32, error)) {
	fake.maxValidIdsMutex.Lock()
	defer fake.maxValidIdsMutex.Unlock()
	fake.MaxValidIdsStub = stub
}

func (fake *FakeUserNamespace) MaxValidIdsReturns(result1 uint32, result2 uint32, result3 error) {
	fake.maxValidIdsMutex.Lock()
	defer fake.maxValidIdsMutex.Unlock()
	fake.MaxValidIdsStub = nil
	fake.maxValidIdsReturns = struct {
		result1 uint32
		result2 uint32
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUserNamespace) MaxValidIdsReturnsOnCall(i int, result1 uint32, result2 uint32, result3 error) {
	fake.maxValidIdsMutex.Lock()
	defer fake.maxValidIdsMutex.Unlock()
	fake.MaxValidIdsStub = nil
	if fake.maxValidIdsReturnsOnCall == nil {
		fake.maxValidIdsReturnsOnCall = make(map[int]struct {
			result1 uint32
			result2 uint32
			result3 error
		})
	}
	fake.maxValidIdsReturnsOnCall[i] = struct {
		result1 uint32
		result2 uint32
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUserNamespace) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.maxValidIdsMutex.RLock()
	defer fake.maxValidIdsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserNamespace) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ runtime.UserNamespace = new(FakeUserNamespace)
